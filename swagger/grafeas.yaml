---
swagger: '2.0'
info:
  title: v1alpha1/proto/grafeas.proto
  version: version not set
schemes:
  - http
  - https
consumes:
  - application/json
produces:
  - application/json
paths:
  /v1alpha1/projects:
    get:
      summary: Lists `Projects`
      operationId: ListProjects
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/apiListProjectsResponse'
      parameters:
        - name: filter
          description: The filter expression.
          in: query
          required: false
          type: string
        - name: page_size
          description: Number of projects to return in the list.
          in: query
          required: false
          type: integer
          format: int32
        - name: page_token
          description: Token to provide to skip to a particular spot in the list.
          in: query
          required: false
          type: string
      tags:
        - GrafeasProjects
    post:
      summary: Creates a new `Project`.
      operationId: CreateProject
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/Empty'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/apiProject'
      tags:
        - GrafeasProjects
  /v1alpha1/projects/{projectId}:
    get:
      summary: Returns the requested `Project`.
      operationId: GetProject
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/apiProject'
      parameters:
        - name: projectId
          in: path
          description: "Part of `parent`. This field contains the projectId for example: projects/{projectId}"
          required: true
          type: string
      tags:
        - GrafeasProjects
    delete:
      summary: Deletes the given `Project` from the system.
      operationId: DeleteProject
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/Empty'
      parameters:
        - name: projectId
          in: path
          description: "Part of `parent`. This field contains the projectId for example: projects/{projectId}"
          required: true
          type: string
      tags:
        - GrafeasProjects
    patch:
      summary: Updates an existing `Project`.
      operationId: UpdateProject
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/apiProject'
      parameters:
        - name: projectId
          in: path
          description: "Part of `parent`. This field contains the projectId for example: projects/{projectId}"
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/apiProject'
      tags:
        - GrafeasProjects

  /v1alpha1/projects/{projectId}/notes:
    get:
      summary: Lists all `Notes` for a given project.
      operationId: ListNotes
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/apiListNotesResponse'
      parameters:
        - name: projectId
          in: path
          description: "Part of `parent`. This field contains the projectId for example: projects/{projectId}"
          required: true
          type: string
        - name: filter
          description: The filter expression.
          in: query
          required: false
          type: string
        - name: page_size
          description: Number of notes to return in the list.
          in: query
          required: false
          type: integer
          format: int32
        - name: page_token
          description: Token to provide to skip to a particular spot in the list.
          in: query
          required: false
          type: string
      tags:
        - GrafeasNotes
    post:
      summary: Creates a new `Note`.
      operationId: CreateNote
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/apiNote'
      parameters:
        - name: projectId
          in: path
          description: "Part of `parent`. This field contains the projectId for example: projects/{projectId}"
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/apiNote'
      tags:
        - GrafeasNotes

  /v1alpha1/projects/{projectId}/occurrences/{occurrenceId}/notes:
    get:
      summary: Gets the `Note` attached to the given `Occurrence`.
      operationId: GetOccurrenceNote
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/apiNote'
      parameters:
        - name: projectId
          in: path
          description: "Part of `name`. The name of the occurrence in the form: projects/{projectId}/occurrences/{occurrenceId}"
          required: true
          type: string
        - name: occurrenceId
          in: path
          description: "Part of `name`. See documentation of `projectId`."
          required: true
          type: "string"
      tags:
        - GrafeasNotes

  /v1alpha1/projects/{projectId}/occurrences:
    get:
      summary: Lists active `Occurrences` for a given project matching the filters.
      operationId: ListOccurrences
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/apiListOccurrencesResponse'
      parameters:
        - name: projectId
          in: path
          description: "Part of `parent`. This contains the projectId for example: projects/{projectId}"
          required: true
          type: string
        - name: filter
          description: The filter expression.
          in: query
          required: false
          type: string
        - name: page_size
          description: Number of occurrences to return in the list.
          in: query
          required: false
          type: integer
          format: int32
        - name: page_token
          description: Token to provide to skip to a particular spot in the list.
          in: query
          required: false
          type: string
      tags:
        - GrafeasOccurrences
    post:
      summary: |-
        Creates a new `Occurrence`. Use this method to create `Occurrences`
        for a resource.
      operationId: CreateOccurrence
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/apiOccurrence'
      parameters:
        - name: projectId
          in: path
          description: "Part of `parent`. This contains the projectId for example: projects/{projectId}"
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/apiOccurrence'
      tags:
        - GrafeasOccurrences

  /v1alpha1/projects/{projectId}/notes/{noteId}/occurrences:
    get:
      summary: |-
        Lists `Occurrences` referencing the specified `Note`. Use this method to
        get all occurrences referencing your `Note` across all your customer
        projects.
      operationId: ListNoteOccurrences
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/apiListNoteOccurrencesResponse'
      parameters:
        - name: projectId
          in: path
          description: "Part of `name`. The name field will contain the note name for example: projects/{projectId}/notes/{noteId}"
          required: true
          type: string
        - name: noteId
          in: path
          description: "Part of `name`. See documentation of `projectId`."
          required: true
          type: string
        - name: filter
          description: The filter expression.
          in: query
          required: false
          type: string
        - name: page_size
          description: Number of notes to return in the list.
          in: query
          required: false
          type: integer
          format: int32
        - name: page_token
          description: Token to provide to skip to a particular spot in the list.
          in: query
          required: false
          type: string
      tags:
        - GrafeasOccurrences

definitions:
  BuildSignatureKeyType:
    type: string
    enum:
      - KEY_TYPE_UNSPECIFIED
      - PGP_ASCII_ARMORED
      - PKIX_PEM
    default: KEY_TYPE_UNSPECIFIED
    description: |-
      - KEY_TYPE_UNSPECIFIED: `KeyType` is not set.
       - PGP_ASCII_ARMORED: `PGP ASCII Armored` public key.
       - PKIX_PEM: `PKIX PEM` public key.
    title: Public key formats

  DeployableDeployment:
    type: object
    properties:
      user_email:
        type: string
        description: Identity of the user that triggered this deployment.
      deploy_time:
        type: string
        format: date-time
        description: Beginning of the lifetime of this deployment.
      undeploy_time:
        type: string
        format: date-time
        description: End of the lifetime of this deployment.
      config:
        type: string
        description: Configuration used to create this deployment.
      address:
        type: string
        description: Address of the runtime element hosting this deployment.
      resource_uri:
        type: array
        items:
          type: string
        description: |-
          Output only. Resource URI for the artifact being deployed taken from the
          deployable field with the same name.
      platform:
        $ref: '#/definitions/DeploymentPlatform'
        description: Platform hosting this deployment.
    description: The period during which some deployable was active in a runtime.

  DeploymentPlatform:
    type: string
    enum:
      - PLATFORM_UNSPECIFIED
      - GKE
      - FLEX
      - CUSTOM
    default: PLATFORM_UNSPECIFIED
    description: |-
      Types of platforms.

       - PLATFORM_UNSPECIFIED: Unknown
       - GKE: Google Container Engine
       - FLEX: Google App Engine: Flexible Environment
       - CUSTOM: Custom user-defined platform

  DiscoveryDiscovered:
    type: object
    properties:
      operation:
        $ref: '#/definitions/Operation'
        description: Output only. An operation that indicates the status of the current scan.
    description: Provides information about the scan status of a discovered resource.

  DockerImageBasis:
    type: object
    properties:
      resource_url:
        type: string
        description: |-
          The resource_url for the resource representing the basis of
          associated occurrence images.
      fingerprint:
        $ref: '#/definitions/DockerImageFingerprint'
        title: The fingerprint of the base image
    description: |-
      Basis describes the base image portion (Note) of the DockerImage
      relationship.  Linked occurrences are derived from this or an
      equivalent image via:
        FROM <Basis.resource_url>
      Or an equivalent reference, e.g. a tag of the resource_url.

  DockerImageDerived:
    type: object
    properties:
      fingerprint:
        $ref: '#/definitions/DockerImageFingerprint'
        title: The fingerprint of the derived image
      distance:
        type: integer
        format: int64
        description: |-
          Output only. The number of layers by which this image differs from
          the associated image basis.
      layer_info:
        type: array
        items:
          $ref: '#/definitions/DockerImageLayer'
        description: |-
          This contains layer-specific metadata, if populated it
          has length "distance" and is ordered with [distance] being the
          layer immediately following the base image and [1]
          being the final layer.
      base_resource_url:
        type: string
        title: |-
          Output only.This contains the base image url for the derived image
          Occurrence
    description: |-
      Derived describes the derived image portion (Occurrence) of the
      DockerImage relationship.  This image would be produced from a Dockerfile
      with FROM <DockerImage.Basis in attached Note>.

  DockerImageFingerprint:
    type: object
    properties:
      v1_name:
        type: string
        description: |-
          The layer-id of the final layer in the Docker image's v1
          representation.
          This field can be used as a filter in list requests.
      v2_blob:
        type: array
        items:
          type: string
        description: The ordered list of v2 blobs that represent a given image.
      v2_name:
        type: string
        description: |-
          Output only. The name of the image's v2 blobs computed via:
            [bottom] := v2_blob[bottom]
            [N] := sha256(v2_blob[N] + " " + v2_name[N+1])
          Only the name of the final blob is kept.
          This field can be used as a filter in list requests.
    description: A set of properties that uniquely identify a given Docker image.

  DockerImageLayer:
    type: object
    properties:
      directive:
        $ref: '#/definitions/LayerDirective'
        description: The recovered Dockerfile directive used to construct this layer.
      arguments:
        type: string
        description: The recovered arguments to the Dockerfile directive.
    description: Layer holds metadata specific to a layer of a Docker image.

  HashHashType:
    type: string
    enum:
      - NONE
      - SHA256
    default: NONE
    description: |-
      Specifies the hash algorithm, if any.

       - NONE: No hash requested.
       - SHA256: A sha256 hash.

  LayerDirective:
    type: string
    enum:
      - DIRECTIVE_UNSPECIFIED
      - MAINTAINER
      - RUN
      - CMD
      - LABEL
      - EXPOSE
      - ENV
      - ADD
      - COPY
      - ENTRYPOINT
      - VOLUME
      - USER
      - WORKDIR
      - ARG
      - ONBUILD
      - STOPSIGNAL
      - HEALTHCHECK
      - SHELL
    default: DIRECTIVE_UNSPECIFIED
    description: |-
      - DIRECTIVE_UNSPECIFIED: Default value for unsupported/missing directive
       - MAINTAINER: https://docs.docker.com/reference/builder/#maintainer
       - RUN: https://docs.docker.com/reference/builder/#run
       - CMD: https://docs.docker.com/reference/builder/#cmd
       - LABEL: https://docs.docker.com/reference/builder/#label
       - EXPOSE: https://docs.docker.com/reference/builder/#expose
       - ENV: https://docs.docker.com/reference/builder/#env
       - ADD: https://docs.docker.com/reference/builder/#add
       - COPY: https://docs.docker.com/reference/builder/#copy
       - ENTRYPOINT: https://docs.docker.com/reference/builder/#entrypoint
       - VOLUME: https://docs.docker.com/reference/builder/#volume
       - USER: https://docs.docker.com/reference/builder/#user
       - WORKDIR: https://docs.docker.com/reference/builder/#workdir
       - ARG: https://docs.docker.com/reference/builder/#arg
       - ONBUILD: https://docs.docker.com/reference/builder/#onbuild
       - STOPSIGNAL: https://docs.docker.com/reference/builder/#stopsignal
       - HEALTHCHECK: https://docs.docker.com/reference/builder/#healthcheck
       - SHELL: https://docs.docker.com/reference/builder/#shell
    title: Instructions from dockerfile

  NoteRelatedUrl:
    type: object
    properties:
      url:
        type: string
        title: Specific URL to associate with the note
      label:
        type: string
        title: Label to describe usage of the URL
    title: Metadata for any related URL information

  PackageManagerArchitecture:
    type: string
    enum:
      - ARCHITECTURE_UNSPECIFIED
      - X86
      - X64
    default: ARCHITECTURE_UNSPECIFIED
    description: |-
      Instruction set architectures supported by various package managers.

       - ARCHITECTURE_UNSPECIFIED: Unknown architecture
       - X86: X86 architecture
       - X64: X64 architecture

  PackageManagerDistribution:
    type: object
    properties:
      cpe_uri:
        type: string
        description: |-
          The cpe_uri in [cpe format](https://cpe.mitre.org/specification/)
          denoting the package manager version distributing a package.
      architecture:
        $ref: '#/definitions/PackageManagerArchitecture'
        title: |-
          The CPU architecture for which packages in this distribution
          channel were built
      latest_version:
        $ref: '#/definitions/VulnerabilityTypeVersion'
        description: |-
          The latest available version of this package in
          this distribution channel.
      maintainer:
        type: string
        description: A freeform string denoting the maintainer of this package.
      url:
        type: string
        description: The distribution channel-specific homepage for this package.
      description:
        type: string
        description: The distribution channel-specific description of this package.
    title: |-
      This represents a particular channel of distribution for a given package.
      e.g. Debian's jessie-backports dpkg mirror

  PackageManagerInstallation:
    type: object
    properties:
      name:
        type: string
        description: Output only. The name of the installed package.
      location:
        type: array
        items:
          $ref: '#/definitions/apiPackageManagerLocation'
        description: |-
          All of the places within the filesystem versions of this package
          have been found.
    description: |-
      This represents how a particular software package may be installed on
      a system.

  PackageManagerPackage:
    type: object
    properties:
      name:
        type: string
        description: The name of the package.
      distribution:
        type: array
        items:
          $ref: '#/definitions/PackageManagerDistribution'
        description: The various channels by which a package is distributed.
    description: |-
      This represents a particular package that is distributed over
      various channels.
      e.g. glibc (aka libc6) is distributed by many, at various versions.

  VersionVersionKind:
    type: string
    enum:
      - NORMAL
      - MINIMUM
      - MAXIMUM
    default: NORMAL
    description: |-
      Whether this is an ordinary package version or a
      sentinel MIN/MAX version.

       - NORMAL: A standard package version, defined by the other fields.
       - MINIMUM: A special version representing negative infinity,
      other fields are ignored.
       - MAXIMUM: A special version representing positive infinity,
      other fields are ignored.

  VulnerabilityTypeDetail:
    type: object
    properties:
      cpe_uri:
        type: string
        description: |-
          The cpe_uri in [cpe format] (https://cpe.mitre.org/specification/) in
          which the vulnerability manifests.  Examples include distro or storage
          location for vulnerable jar.
          This field can be used as a filter in list requests.
      package:
        type: string
        description: |-
          The name of the package where the vulnerability was found.
          This field can be used as a filter in list requests.
      min_affected_version:
        $ref: '#/definitions/VulnerabilityTypeVersion'
        description: The min version of the package in which the vulnerability exists.
      max_affected_version:
        $ref: '#/definitions/VulnerabilityTypeVersion'
        description: |-
          The max version of the package in which the vulnerability exists.
          This field can be used as a filter in list requests.
      severity_name:
        type: string
        description: 'The severity (eg: distro assigned severity) for this vulnerability.'
      description:
        type: string
        description: A vendor-specific description of this note.
      fixed_location:
        $ref: '#/definitions/VulnerabilityTypeVulnerabilityLocation'
        description: The fix for this specific package version.
      package_type:
        type: string
        title: |-
          The type of package; whether native or non native(ruby gems,
          node.js packages etc)
    title: |-
      Identifies all occurrences of this vulnerability in the package for a
      specific distro/location
      For example: glibc in cpe:/o:debian:debian_linux:8 for versions 2.1 - 2.2

  VulnerabilityTypePackageIssue:
    type: object
    properties:
      affected_location:
        $ref: '#/definitions/VulnerabilityTypeVulnerabilityLocation'
        description: The location of the vulnerability.
      fixed_location:
        $ref: '#/definitions/VulnerabilityTypeVulnerabilityLocation'
        description: The location of the available fix for vulnerability.
      severity_name:
        type: string
        description: 'The severity (eg: distro assigned severity) for this vulnerability.'
    description: |-
      This message wraps a location affected by a vulnerability and its
      associated fix (if one is available).

  VulnerabilityTypeSeverity:
    type: string
    enum:
      - SEVERITY_UNSPECIFIED
      - MINIMAL
      - LOW
      - MEDIUM
      - HIGH
      - CRITICAL
    default: SEVERITY_UNSPECIFIED
    description: |-
       - SEVERITY_UNSPECIFIED: Unknown Impact
       - MINIMAL: Minimal Impact
       - LOW: Low Impact
       - MEDIUM: Medium Impact
       - HIGH: High Impact
       - CRITICAL: Critical Impact
    title: Note provider-assigned severity/impact ranking

  VulnerabilityTypeVersion:
    type: object
    properties:
      epoch:
        type: integer
        format: int32
        description: Used to correct mistakes in the version numbering scheme.
      name:
        type: string
        description: The main part of the version name.
      revision:
        type: string
        description: The iteration of the package build from the above version.
      kind:
        $ref: '#/definitions/VersionVersionKind'
        description: |-
          Distinguish between sentinel MIN/MAX versions and normal versions.
          If kind is not NORMAL, then the other fields are ignored.
    title: |-
      Version contains structured information about the version of the package.
      For a discussion of this in Debian/Ubuntu:
      http://serverfault.com/questions/604541/debian-packages-version-convention
      For a discussion of this in Redhat/Fedora/Centos:
      http://blog.jasonantman.com/2014/07/how-yum-and-rpm-compare-versions/

  VulnerabilityTypeVulnerabilityDetails:
    type: object
    properties:
      type:
        type: string
        title: |-
          The type of package; whether native or non native(ruby gems,
          node.js packages etc)
      severity:
        $ref: '#/definitions/VulnerabilityTypeSeverity'
        description: Output only. The note provider assigned Severity of the vulnerability.
      cvss_score:
        type: number
        format: float
        description: |-
          Output only. The CVSS score of this vulnerability. CVSS score is on a
          scale of 0-10 where 0 indicates low severity and 10 indicates high
          severity.
      package_issue:
        type: array
        items:
          $ref: '#/definitions/VulnerabilityTypePackageIssue'
        description: |-
          The set of affected locations and their fixes (if available) within
          the associated resource.
    description: |-
      Used by Occurrence to point to where the vulnerability exists and how
      to fix it.

  VulnerabilityTypeVulnerabilityLocation:
    type: object
    properties:
      cpe_uri:
        type: string
        description: |-
          The cpe_uri in [cpe format] (https://cpe.mitre.org/specification/)
          format. Examples include distro or storage location for vulnerable jar.
          This field can be used as a filter in list requests.
      package:
        type: string
        description: The package being described.
      version:
        $ref: '#/definitions/VulnerabilityTypeVersion'
        description: |-
          The version of the package being described.
          This field can be used as a filter in list requests.
    title: The location of the vulnerability

  apiAliasContext:
    type: object
    properties:
      kind:
        $ref: '#/definitions/apiAliasContextKind'
        description: The alias kind.
      name:
        type: string
        description: The alias name.
    description: An alias to a repo revision.

  apiAliasContextKind:
    type: string
    enum:
      - KIND_UNSPECIFIED
      - FIXED
      - MOVABLE
      - OTHER
    default: KIND_UNSPECIFIED
    description: |-
      The type of an alias.

       - KIND_UNSPECIFIED: Unknown.
       - FIXED: Git tag.
       - MOVABLE: Git branch.
       - OTHER: Used to specify non-standard aliases. For example, if a Git repo has a
      ref named "refs/foo/bar".

  apiArtifact:
    type: object
    properties:
      name:
        type: string
        description: |-
          Name of the artifact. This may be the path to a binary or jar file, or in
          the case of a container build, the name used to push the container image to
          Google Container Registry, as presented to `docker push`.

          This field is deprecated in favor of the plural `names` field; it continues
          to exist here to allow existing BuildProvenance serialized to json in
          google.devtools.containeranalysis.v1alpha1.BuildDetails.provenance_bytes to
          deserialize back into proto.
      checksum:
        type: string
        description: |-
          Hash or checksum value of a binary, or Docker Registry 2.0 digest of a
          container.
      id:
        type: string
        title: |-
          Artifact ID, if any; for container images, this will be a URL by digest
          like gcr.io/projectID/imagename@sha256:123456
      names:
        type: array
        items:
          type: string
        description: |-
          Related artifact names. This may be the path to a binary or jar file, or in
          the case of a container build, the name used to push the container image to
          Google Container Registry, as presented to `docker push`. Note that a
          single Artifact ID can have multiple names, for example if two tags are
          applied to one image.
    description: Artifact describes a build product.

  apiBuildDetails:
    type: object
    properties:
      provenance:
        $ref: '#/definitions/apiBuildProvenance'
        title: The actual provenance
      provenance_bytes:
        type: string
        description: |-
          Serialized JSON representation of the provenance, used in generating the
          `BuildSignature` in the corresponding Result. After verifying the
          signature, `provenance_bytes` can be unmarshalled and compared to the
          provenance to confirm that it is unchanged. A base64-encoded string
          representation of the provenance bytes is used for the signature in order
          to interoperate with openssl which expects this format for signature
          verification.

          The serialized form is captured both to avoid ambiguity in how the
          provenance is marshalled to json as well to prevent incompatibilities with
          future changes.
    description: Message encapsulating build provenance details.

  apiBuildProvenance:
    type: object
    properties:
      id:
        type: string
        description: Unique identifier of the build.
      projectId:
        type: string
        description: ID of the project.
      commands:
        type: array
        items:
          $ref: '#/definitions/apiCommand'
        description: Commands requested by the build.
      built_artifacts:
        type: array
        items:
          $ref: '#/definitions/apiArtifact'
        description: Output of the build.
      create_time:
        type: string
        format: date-time
        description: Time at which the build was created.
      start_time:
        type: string
        format: date-time
        description: Time at which execution of the build was started.
      finish_time:
        type: string
        format: date-time
        description: Time at which execution of the build was finished.
      creator:
        type: string
        description: |-
          E-mail address of the user who initiated this build. Note that this was the
          user's e-mail address at the time the build was initiated; this address may
          not represent the same end-user for all time.
      logs_bucket:
        type: string
        description: Google Cloud Storage bucket where logs were written.
      source_provenance:
        $ref: '#/definitions/apiSource'
        description: Details of the Source input to the build.
      trigger_id:
        type: string
        description: Trigger identifier if the build was triggered automatically; empty if not.
      build_options:
        type: object
        additionalProperties:
          type: string
        description: |-
          Special options applied to this build. This is a catch-all field where
          build providers can enter any desired additional details.
      builder_version:
        type: string
        description: Version string of the builder at the time this build was executed.
    description: |-
      Provenance of a build. Contains all information needed to verify the full
      details about the build from source to completion.

  apiBuildSignature:
    type: object
    properties:
      public_key:
        type: string
        description: |-
          Public key of the builder which can be used to verify that the related
          findings are valid and unchanged. If `key_type` is empty, this defaults
          to PEM encoded public keys.

          This field may be empty if `key_id` references an external key.

          For Cloud Container Builder based signatures, this is a PEM encoded public
          key. To verify the Cloud Container Builder signature, place the contents of
          this field into a file (public.pem). The signature field is base64-decoded
          into its binary representation in signature.bin, and the provenance bytes
          from `BuildDetails` are base64-decoded into a binary representation in
          signed.bin. OpenSSL can then verify the signature:
          `openssl sha256 -verify public.pem -signature signature.bin signed.bin`
      signature:
        type: string
        description: 'Signature of the related `BuildProvenance`, encoded in a base64 string.'
      key_id:
        type: string
        description: |-
          An Id for the key used to sign. This could be either an Id for the key
          stored in `public_key` (such as the Id or fingerprint for a PGP key, or the
          CN for a cert), or a reference to an external key (such as a reference to a
          key in Cloud Key Management Service).
      key_type:
        $ref: '#/definitions/BuildSignatureKeyType'
        title: |-
          The type of the key, either stored in `public_key` or referenced in
          `key_id`
    description: Message encapsulating the signature of the verified build.

  apiBuildType:
    type: object
    properties:
      builder_version:
        type: string
        description: Version of the builder which produced this Note.
      signature:
        $ref: '#/definitions/apiBuildSignature'
        description: |-
          Signature of the build in Occurrences pointing to the Note containing this
          `BuilderDetails`.
    description: |-
      Note holding the version of the provider's builder and the signature of
      the provenance message in linked BuildDetails.

  apiConfidence:
    type: string
    enum:
      - CONFIDENCE_UNSPECIFIED
      - MINIMAL
      - LOW
      - MEDIUM
      - HIGH
      - COMPLETE
    default: SEVERITY_UNSPECIFIED
    description: |-
       - CONFIDENCE_UNSPECIFIED: Unknown Confidence
       - MINIMAL: Minimal Confidence
       - LOW: Low Confidence
       - MEDIUM: Medium Confidence
       - HIGH: High Confidence
       - COMPLETE: Complete Confidence
    title: Note provider-assigned confidence on the validity of an occurrence

  apiCloudRepoSourceContext:
    type: object
    properties:
      repo_id:
        $ref: '#/definitions/apiRepoId'
        description: The ID of the repo.
      revision_id:
        type: string
        description: A revision ID.
      alias_context:
        $ref: '#/definitions/apiAliasContext'
        description: 'An alias, which may be a branch or tag.'
    description: |-
      A CloudRepoSourceContext denotes a particular revision in a Google Cloud
      Source Repo.

  apiCommand:
    type: object
    properties:
      name:
        type: string
        description: |-
          Name of the command, as presented on the command line, or if the command is
          packaged as a Docker container, as presented to `docker pull`.
      env:
        type: array
        items:
          type: string
        description: Environment variables set before running this Command.
      args:
        type: array
        items:
          type: string
        description: Command-line arguments used when executing this Command.
      dir:
        type: string
        description: |-
          Working directory (relative to project source root) used when running
          this Command.
      id:
        type: string
        description: |-
          Optional unique identifier for this Command, used in wait_for to reference
          this Command as a dependency.
      wait_for:
        type: array
        items:
          type: string
        description: The ID(s) of the Command(s) that this Command depends on.
    description: Command describes a step performed as part of the build pipeline.

  apiCreateOperationRequest:
    type: object
    properties:
      parent:
        type: string
        description: The projectId that this operation should be created under.
      operation_id:
        type: string
        description: The ID to use for this operation.
      operation:
        $ref: '#/definitions/Operation'
        description: The operation to create.
    title: Request for creating an operation

  apiDeployable:
    type: object
    properties:
      resource_uri:
        type: array
        items:
          type: string
        description: Resource URI for the artifact being deployed.
    description: An artifact that can be deployed in some runtime.

  apiDiscovery:
    type: object
    properties:
      analysis_kind:
        $ref: '#/definitions/apiNoteKind'
        description: The kind of analysis that is handled by this discovery.
    description: |-
      A note that indicates a type of analysis a provider would perform. This note
      exists in a provider's project. A `Discovery` occurrence is created in a
      consumer's project at the start of analysis. The occurrence's operation will
      indicate the status of the analysis. Absence of an occurrence linked to this
      note for a resource indicates that analysis hasn't started.

  apiFileHashes:
    type: object
    properties:
      file_hash:
        type: array
        items:
          $ref: '#/definitions/apiHash'
        description: Collection of file hashes.
    description: |-
      Container message for hashes of byte content of files, used in Source
      messages to verify integrity of source input to the build.

  apiGerritSourceContext:
    type: object
    properties:
      host_uri:
        type: string
        description: The URI of a running Gerrit instance.
      gerrit_project:
        type: string
        description: |-
          The full project name within the host. Projects may be nested, so
          "project/subproject" is a valid project name. The "repo name" is
          the hostURI/project.
      revision_id:
        type: string
        description: A revision (commit) ID.
      alias_context:
        $ref: '#/definitions/apiAliasContext'
        description: 'An alias, which may be a branch or tag.'
    description: A SourceContext referring to a Gerrit project.

  apiGitSourceContext:
    type: object
    properties:
      url:
        type: string
        description: Git repository URL.
      revision_id:
        type: string
        description: |-
          Required.
          Git commit hash.
    description: |-
      A GitSourceContext denotes a particular revision in a third party Git
      repository (e.g., GitHub).

  apiHash:
    type: object
    properties:
      type:
        $ref: '#/definitions/HashHashType'
        description: The type of hash that was performed.
      value:
        type: string
        format: byte
        description: The hash value.
    description: Container message for hash values.

  apiListNoteOccurrencesResponse:
    type: object
    properties:
      occurrences:
        type: array
        items:
          $ref: '#/definitions/apiOccurrence'
        description: The occurrences attached to the specified note.
      next_page_token:
        type: string
        description: Token to receive the next page of notes.
    description: Response including listed occurrences for a note.

  apiListNotesResponse:
    type: object
    properties:
      notes:
        type: array
        items:
          $ref: '#/definitions/apiNote'
        title: The occurrences requested
      next_page_token:
        type: string
        description: |-
          The next pagination token in the list response. It should be used as
          page_token for the following request. An empty value means no more result.
    description: Response including listed notes.

  apiListOccurrencesResponse:
    type: object
    properties:
      occurrences:
        type: array
        items:
          $ref: '#/definitions/apiOccurrence'
        description: The occurrences requested.
      next_page_token:
        type: string
        description: |-
          The next pagination token in the list response. It should be used as
          `page_token` for the following request. An empty value means no more
          results.
    description: Response including listed active occurrences.

  apiListProjectsResponse:
    type: object
    properties:
      projects:
        type: array
        items:
          $ref: '#/definitions/apiProject'
        description: The projects requested.
      next_page_token:
        type: string
        description: |-
          The next pagination token in the list response. It should be used as
          `page_token` for the following request. An empty value means no more
          results.
    title: Response including listed projects

  apiNote:
    type: object
    properties:
      name:
        type: string
        title: |-
          The name of the note in the form "projects/{projectId}/notes/{noteId}"
      short_description:
        type: string
        description: A one sentence description of this `Note`.
      long_description:
        type: string
        description: A detailed description of this `Note`.
      kind:
        $ref: '#/definitions/apiNoteKind'
        description: |-
          Output only. This explicitly denotes which kind of note is specified. This
          field can be used as a filter in list requests.
      related_url:
        type: array
        items:
          $ref: '#/definitions/NoteRelatedUrl'
        title: URLs associated with this note
      expiration_time:
        type: string
        format: date-time
        description: 'Time of expiration for this note, null if note does not expire.'
      create_time:
        type: string
        format: date-time
        description: |-
          Output only. The time this note was created.
          This field can be used as a filter in list requests.
      update_time:
        type: string
        format: date-time
        description: |-
          Output only. The time this note was last updated.
          This field can be used as a filter in list requests.
      vulnerability_type:
        $ref: '#/definitions/apiVulnerabilityType'
        description: A package vulnerability type of note.
      build_type:
        $ref: '#/definitions/apiBuildType'
        description: Build provenance type for a verifiable build.
      base_image:
        $ref: '#/definitions/DockerImageBasis'
        description: A note describing a base image.
      package:
        $ref: '#/definitions/PackageManagerPackage'
        description: A note describing a package hosted by various package managers.
      deployable:
        $ref: '#/definitions/apiDeployable'
        description: A note describing something that can be deployed.
      discovery:
        $ref: '#/definitions/apiDiscovery'
        description: A note describing a provider/analysis type.
    description: Provides a detailed description of a `Note`.

  apiNoteKind:
    type: string
    enum:
      - KIND_UNSPECIFIED
      - PACKAGE_VULNERABILITY
      - BUILD_DETAILS
      - IMAGE_BASIS
      - PACKAGE_MANAGER
      - DEPLOYABLE
      - DISCOVERY
    default: KIND_UNSPECIFIED
    description: |-
      This must be 1:1 with members of our oneofs, it can be used for filtering
      Note and Occurrence on their kind.
       - KIND_UNSPECIFIED: Unknown
       - PACKAGE_VULNERABILITY: The note and occurrence represent a package vulnerability.
       - BUILD_DETAILS: The note and occurrence assert build provenance.
       - IMAGE_BASIS: This represents an image basis relationship.
       - PACKAGE_MANAGER: This represents a package installed via a package manager.
       - DEPLOYABLE: The note and occurrence track deployment events.
       - DISCOVERY: The note and occurrence track the initial discovery status of a resource.

  apiOccurrence:
    type: object
    properties:
      name:
        type: string
        description: |-
          Output only. The name of the `Occurrence` in the form "projects/{projectId}/occurrences/{occuurenceId}"
      ibm_title:
        type: string
        description: |-
          A short title of the `Occurrence`
      ibm_description:
        type: string
        description: |-
          A description of the `Occurrence`
      ibm_severity:
        $ref: '#/definitions/apiSeverity'
        description: |-
          The common severity of the occurrence
      ibm_confidence:
        $ref: '#/definitions/apiConfidence'
        description: |-
          The level of confidence on the occurrence
      resource_url:
        type: string
        description: |-
          The unique URL of the resource, image or the container, for which the `Occurrence` applies.
          For example, https://gcr.io/project/image@sha256:foo.
          This field can be used as a filter in list requests.
      ibm_resource_org:
        type: string
        description: The organization the resource belongs to
      ibm_resource_region:
        type: string
        description: The region the resource belongs to
      ibm_resource_account:
        type: string
        description: The account the resource belongs to
      ibm_resource_environment_name:
        type: string
        description: The name of the logical environment the resource is linked to
      ibm_resource_component_name:
        type: string
        description: The name of the logical component the resource is linked to
      ibm_resource_toolchain_id:
        type: string
        description: The id of the toolchain the resource is linked to
      note_name:
        type: string
        description: |-
          An analysis note associated with this image, in the form "projects/{projectId}/notes/{noteId}"
          This field can be used as a filter in list requests.
      kind:
        $ref: '#/definitions/apiNoteKind'
        description: |-
          Output only. This explicitly denotes which of the `Occurrence` details are specified.
          This field can be used as a filter in list requests.
      remediation:
        type: string
        title: A description of actions that can be taken to remedy the `Note`
      create_time:
        type: string
        format: date-time
        description: Output only. The time this `Occurrence` was created.
      update_time:
        type: string
        format: date-time
        description: Output only. The time this `Occurrence` was last updated.
      vulnerability_details:
        $ref: '#/definitions/VulnerabilityTypeVulnerabilityDetails'
        description: Details of a security vulnerability note.
      build_details:
        $ref: '#/definitions/apiBuildDetails'
        description: Build details for a verifiable build.
      derived_image:
        $ref: '#/definitions/DockerImageDerived'
        description: Describes how this resource derives from the basis in the associated note.
      installation:
        $ref: '#/definitions/PackageManagerInstallation'
        description: Describes the installation of a package on the linked resource.
      deployment:
        $ref: '#/definitions/DeployableDeployment'
        description: Describes the deployment of an artifact on a runtime.
      discovered:
        $ref: '#/definitions/DiscoveryDiscovered'
        description: Describes the initial scan status for this resource.
    description: '`Occurrence` includes information about analysis occurrences for an image.'

  apiPackageManagerLocation:
    type: object
    properties:
      cpe_uri:
        type: string
        description: |-
          The cpe_uri in [cpe format](https://cpe.mitre.org/specification/)
          denoting the package manager version distributing a package.
      version:
        $ref: '#/definitions/VulnerabilityTypeVersion'
        description: The version installed at this location.
      path:
        type: string
        description: The path from which we gathered that this package/version is installed.
    title: |-
      An occurrence of a particular package installation found within a system's filesystem.
      e.g. glibc was found in /var/lib/dpkg/status

  apiProject:
    type: object
    properties:
      name:
        type: string
        title: The name of the project of the form "projects/{projectId}"
    description: Provides detailed description of a `Project`.

  apiProjectRepoId:
    type: object
    properties:
      projectId:
        type: string
        description: The ID of the project.
      repo_name:
        type: string
        description: The name of the repo. Leave empty for the default repo.
    description: |-
      Selects a repo using a Google Cloud Platform project ID (e.g. winged-cargo-31)
      and a repo name within that project.

  apiRepoId:
    type: object
    properties:
      project_repo_id:
        $ref: '#/definitions/apiProjectRepoId'
        description: A combination of a project ID and a repo name.
      uid:
        type: string
        description: 'A server-assigned, globally unique identifier.'
    description: A unique identifier for a Cloud Repo.

  apiRepoSource:
    type: object
    properties:
      projectId:
        type: string
        description: ID of the project that owns the repo.
      repo_name:
        type: string
        description: Name of the repo.
      branch_name:
        type: string
        description: Name of the branch to build.
      tag_name:
        type: string
        description: Name of the tag to build.
      commit_sha:
        type: string
        description: Explicit commit SHA to build.
    description: RepoSource describes the location of the source in a Google Cloud Source Repository.

  apiSeverity:
    type: string
    enum:
      - SEVERITY_UNSPECIFIED
      - MINIMAL
      - LOW
      - MEDIUM
      - HIGH
      - CRITICAL
    default: SEVERITY_UNSPECIFIED
    description: |-
       - SEVERITY_UNSPECIFIED: Unknown Impact
       - MINIMAL: Minimal Impact
       - LOW: Low Impact
       - MEDIUM: Medium Impact
       - HIGH: High Impact
       - CRITICAL: Critical Impact
    title: Note provider-assigned severity/impact ranking

  apiSource:
    type: object
    properties:
      storage_source:
        $ref: '#/definitions/apiStorageSource'
        description: |-
          If provided, get the source from this location in in Google Cloud Storage.
      repo_source:
        $ref: '#/definitions/apiRepoSource'
        description: 'If provided, get source from this location in a Cloud Repo.'
      artifact_storage_source:
        $ref: '#/definitions/apiStorageSource'
        description: |-
          If provided, the input binary artifacts for the build came from this location.
      file_hashes:
        type: object
        additionalProperties:
          $ref: '#/definitions/apiFileHashes'
        description: |-
          Hash(es) of the build source, which can be used to verify that the original
          source integrity was maintained in the build.

          The keys to this map are file paths used as build source and the values
          contain the hash values for those files.

          If the build source came in a single package such as a gzipped tarfile
          (.tar.gz), the FileHash will be for the single path to that file.
      context:
        $ref: '#/definitions/apiSourceContext'
        description: 'If provided, the source code used for the build came from this location.'
      additional_contexts:
        type: array
        items:
          $ref: '#/definitions/apiSourceContext'
        description: |-
          If provided, some of the source code used for the build may be found in
          these locations, in the case where the source repository had multiple
          remotes or submodules. This list will not include the context specified in
          the context field.
    description: Source describes the location of the source used for the build.

  apiSourceContext:
    type: object
    properties:
      cloud_repo:
        $ref: '#/definitions/apiCloudRepoSourceContext'
        description: A SourceContext referring to a revision in a Google Cloud Source Repo.
      gerrit:
        $ref: '#/definitions/apiGerritSourceContext'
        description: A SourceContext referring to a Gerrit project.
      git:
        $ref: '#/definitions/apiGitSourceContext'
        description: 'A SourceContext referring to any third party Git repo (e.g., GitHub).'
      labels:
        type: object
        additionalProperties:
          type: string
        description: Labels with user defined metadata.
    description: |-
      A SourceContext is a reference to a tree of files. A SourceContext together
      with a path point to a unique revision of a single file or directory.

  apiStorageSource:
    type: object
    properties:
      bucket:
        type: string
        description: |-
          Google Cloud Storage bucket containing source (see [Bucket Name
          Requirements]
          (https://cloud.google.com/storage/docs/bucket-naming#requirements)).
      object:
        type: string
        description: Google Cloud Storage object containing source.
      generation:
        type: string
        format: int64
        description: Google Cloud Storage generation for the object.
    description: |-
      StorageSource describes the location of the source in an archive file in Google Cloud Storage.

  apiUpdateOperationRequest:
    type: object
    properties:
      name:
        type: string
        description: |-
          The name of the Operation.
          Should be of the form "projects/{projectId}/operations/{operationId}".
      operation:
        $ref: '#/definitions/Operation'
        description: The operation to create.
    title: Request for updating an existing operation

  apiVulnerabilityType:
    type: object
    properties:
      cvss_score:
        type: number
        format: float
        description: The CVSS score for this Vulnerability.
      severity:
        $ref: '#/definitions/VulnerabilityTypeSeverity'
        title: Note provider assigned impact of the vulnerability
      details:
        type: array
        items:
          $ref: '#/definitions/VulnerabilityTypeDetail'
        description: |-
          All information about the package to specifically identify this
          vulnerability. One entry per (version range and cpe_uri) the
          package vulnerability has manifested in.
    description: VulnerabilityType provides metadata about a security vulnerability.

  Empty:
    type: object
    description: |-
      service Foo {
            rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);
          }

      The JSON representation for `Empty` is empty JSON object `{}`.
    title: |-
      A generic empty message that you can re-use to avoid defining duplicated
      empty messages in your APIs. A typical example is to use it as the request
      or the response type of an API method.

  Operation:
    type: object
    properties:
      name:
        type: string
        description: |-
          The server-assigned name, which is only unique within the same
          service that originally returns it. If you use the default HTTP mapping,
          the `name` should have the format of `operations/some/unique/name`.
      metadata:
        type: object
        description: |-
          Service-specific metadata associated with the operation.  It
          typically contains progress information and common metadata such as create
          time. Some services might not provide such metadata.  Any method that
          returns a long-running operation should document the metadata type, if
          any.
        additionalProperties:
          type: string
          description: "Properties of the object. Contains field @type with type URL."
      done:
        type: boolean
        description: |-
          If the value is `false`, it means the operation is still in
          progress. If true, the operation is completed, and either `error` or
          `response` is available.
      error:
        description: "The error result of the operation in case of failure or cancellation."
        $ref: "#/definitions/Status"
      response:
        type: object
        description: |-
          The normal response of the operation in case of success.  If
          the original method returns no data on success, such as `Delete`, the
          response is `google.protobuf.Empty`.  If the original method is standard
          `Get`/`Create`/`Update`, the response should be the resource.  For other
          methods, the response should have the type `XxxResponse`, where `Xxx`
          is the original method name.  For example, if the original method name
          is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
        additionalProperties:
          type: string
          description: "Properties of the object. Contains field @type with type URL."
    description: |-
      This resource represents a long-running operation that is the result
      of a network API call."

  Status:
    type: object
    properties:
      code:
        type: integer
        format: int32
        description: "The status code, which should be an enum value of google.rpc.Code."
      message:
        type: string
        description: |-
          A developer-facing error message, which should be in English.
          Any user-facing error message should be localized and sent in the google.rpc.Status.details
           field, or localized by the client.
      details:
        type: array
        description: |-
          A list of messages that carry the error details.  There is a
          common set of message types for APIs to use.
        items:
          type: object
          additionalProperties:
            type: string
            description: "Properties of the object. Contains field @type with type URL."
    description: |-
      The `Status` type defines a logical error model that is suitable
      for different programming environments, including REST APIs and RPC APIs.
      It is used by [gRPC](https://github.com/grpc). The error model is designed
      to be:
        - Simple to use and understand for most users
        - Flexible enough to meet unexpected needs
      # Overview
      The `Status` message contains three pieces of data: error code, error message,
      and error details. The error code should be an enum value of google.rpc.Code,
      but it may accept additional error codes if needed.
      The error message should be a developer-facing English message that helps developers
      *understand* and *resolve* the error. If a localized user-facing error message is needed,
      put the localized message in the error details or localize it in the client.
      The optional error details may contain arbitrary information about the error.
      There is a predefined set of error detail types in the package `google.rpc`
      that can be used for common error conditions.
      # Language mapping
      The `Status` message is the logical representation of the error model,
      but it is not necessarily the actual wire format.
      When the `Status` message is exposed in different client libraries and different wire protocols,
      it can be mapped differently.
      For example, it will likely be mapped to some exceptions in Java, but more
      likely mapped to some error codes in C.
      # Other uses
      The error model and the `Status` message can be used in a variety of environments, either
      with or without APIs, to provide a consistent developer experience across different environments.
      Example uses of this error model include:
        - Partial errors. If a service needs to return partial errors to the client,
          it may embed the `Status` in the normal response to indicate the partial errors.
        - Workflow errors. A typical workflow has multiple steps.
          Each step may have a `Status` message for error reporting.
        - Batch operations. If a client uses batch request and batch response, the `Status` message
          should be used directly inside batch response, one for each error sub-response.
        - Asynchronous operations. If an API call embeds asynchronous operation
          results in its response, the status of those operations should be
          represented directly using the `Status` message.
        - Logging. If some API errors are stored in logs, the message `Status` could be used directly
          after any stripping needed for security/privacy reasons.