# coding: utf-8

from __future__ import absolute_import
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class ApiArtifact(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, name: str=None, checksum: str=None, id: str=None, names: List[str]=None):
        """
        ApiArtifact - a model defined in Swagger

        :param name: The name of this ApiArtifact.
        :type name: str
        :param checksum: The checksum of this ApiArtifact.
        :type checksum: str
        :param id: The id of this ApiArtifact.
        :type id: str
        :param names: The names of this ApiArtifact.
        :type names: List[str]
        """
        self.swagger_types = {
            'name': str,
            'checksum': str,
            'id': str,
            'names': List[str]
        }

        self.attribute_map = {
            'name': 'name',
            'checksum': 'checksum',
            'id': 'id',
            'names': 'names'
        }

        self._name = name
        self._checksum = checksum
        self._id = id
        self._names = names

    @classmethod
    def from_dict(cls, dikt) -> 'ApiArtifact':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The apiArtifact of this ApiArtifact.
        :rtype: ApiArtifact
        """
        return deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """
        Gets the name of this ApiArtifact.
        Name of the artifact. This may be the path to a binary or jar file, or in the case of a container build, the name used to push the container image to Google Container Registry, as presented to `docker push`.  This field is deprecated in favor of the plural `names` field; it continues to exist here to allow existing BuildProvenance serialized to json in google.devtools.containeranalysis.v1alpha1.BuildDetails.provenance_bytes to deserialize back into proto.

        :return: The name of this ApiArtifact.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """
        Sets the name of this ApiArtifact.
        Name of the artifact. This may be the path to a binary or jar file, or in the case of a container build, the name used to push the container image to Google Container Registry, as presented to `docker push`.  This field is deprecated in favor of the plural `names` field; it continues to exist here to allow existing BuildProvenance serialized to json in google.devtools.containeranalysis.v1alpha1.BuildDetails.provenance_bytes to deserialize back into proto.

        :param name: The name of this ApiArtifact.
        :type name: str
        """

        self._name = name

    @property
    def checksum(self) -> str:
        """
        Gets the checksum of this ApiArtifact.
        Hash or checksum value of a binary, or Docker Registry 2.0 digest of a container.

        :return: The checksum of this ApiArtifact.
        :rtype: str
        """
        return self._checksum

    @checksum.setter
    def checksum(self, checksum: str):
        """
        Sets the checksum of this ApiArtifact.
        Hash or checksum value of a binary, or Docker Registry 2.0 digest of a container.

        :param checksum: The checksum of this ApiArtifact.
        :type checksum: str
        """

        self._checksum = checksum

    @property
    def id(self) -> str:
        """
        Gets the id of this ApiArtifact.

        :return: The id of this ApiArtifact.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """
        Sets the id of this ApiArtifact.

        :param id: The id of this ApiArtifact.
        :type id: str
        """

        self._id = id

    @property
    def names(self) -> List[str]:
        """
        Gets the names of this ApiArtifact.
        Related artifact names. This may be the path to a binary or jar file, or in the case of a container build, the name used to push the container image to Google Container Registry, as presented to `docker push`. Note that a single Artifact ID can have multiple names, for example if two tags are applied to one image.

        :return: The names of this ApiArtifact.
        :rtype: List[str]
        """
        return self._names

    @names.setter
    def names(self, names: List[str]):
        """
        Sets the names of this ApiArtifact.
        Related artifact names. This may be the path to a binary or jar file, or in the case of a container build, the name used to push the container image to Google Container Registry, as presented to `docker push`. Note that a single Artifact ID can have multiple names, for example if two tags are applied to one image.

        :param names: The names of this ApiArtifact.
        :type names: List[str]
        """

        self._names = names

