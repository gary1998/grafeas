# coding: utf-8

from __future__ import absolute_import
from swagger_server.models.api_artifact import ApiArtifact
from swagger_server.models.api_command import ApiCommand
from swagger_server.models.api_source import ApiSource
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class ApiBuildProvenance(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id: str=None, project_id: str=None, commands: List[ApiCommand]=None, built_artifacts: List[ApiArtifact]=None, create_time: datetime=None, start_time: datetime=None, finish_time: datetime=None, creator: str=None, logs_bucket: str=None, source_provenance: ApiSource=None, trigger_id: str=None, build_options: Dict[str, str]=None, builder_version: str=None):
        """
        ApiBuildProvenance - a model defined in Swagger

        :param id: The id of this ApiBuildProvenance.
        :type id: str
        :param project_id: The project_id of this ApiBuildProvenance.
        :type project_id: str
        :param commands: The commands of this ApiBuildProvenance.
        :type commands: List[ApiCommand]
        :param built_artifacts: The built_artifacts of this ApiBuildProvenance.
        :type built_artifacts: List[ApiArtifact]
        :param create_time: The create_time of this ApiBuildProvenance.
        :type create_time: datetime
        :param start_time: The start_time of this ApiBuildProvenance.
        :type start_time: datetime
        :param finish_time: The finish_time of this ApiBuildProvenance.
        :type finish_time: datetime
        :param creator: The creator of this ApiBuildProvenance.
        :type creator: str
        :param logs_bucket: The logs_bucket of this ApiBuildProvenance.
        :type logs_bucket: str
        :param source_provenance: The source_provenance of this ApiBuildProvenance.
        :type source_provenance: ApiSource
        :param trigger_id: The trigger_id of this ApiBuildProvenance.
        :type trigger_id: str
        :param build_options: The build_options of this ApiBuildProvenance.
        :type build_options: Dict[str, str]
        :param builder_version: The builder_version of this ApiBuildProvenance.
        :type builder_version: str
        """
        self.swagger_types = {
            'id': str,
            'project_id': str,
            'commands': List[ApiCommand],
            'built_artifacts': List[ApiArtifact],
            'create_time': datetime,
            'start_time': datetime,
            'finish_time': datetime,
            'creator': str,
            'logs_bucket': str,
            'source_provenance': ApiSource,
            'trigger_id': str,
            'build_options': Dict[str, str],
            'builder_version': str
        }

        self.attribute_map = {
            'id': 'id',
            'project_id': 'projectId',
            'commands': 'commands',
            'built_artifacts': 'built_artifacts',
            'create_time': 'create_time',
            'start_time': 'start_time',
            'finish_time': 'finish_time',
            'creator': 'creator',
            'logs_bucket': 'logs_bucket',
            'source_provenance': 'source_provenance',
            'trigger_id': 'trigger_id',
            'build_options': 'build_options',
            'builder_version': 'builder_version'
        }

        self._id = id
        self._project_id = project_id
        self._commands = commands
        self._built_artifacts = built_artifacts
        self._create_time = create_time
        self._start_time = start_time
        self._finish_time = finish_time
        self._creator = creator
        self._logs_bucket = logs_bucket
        self._source_provenance = source_provenance
        self._trigger_id = trigger_id
        self._build_options = build_options
        self._builder_version = builder_version

    @classmethod
    def from_dict(cls, dikt) -> 'ApiBuildProvenance':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The apiBuildProvenance of this ApiBuildProvenance.
        :rtype: ApiBuildProvenance
        """
        return deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """
        Gets the id of this ApiBuildProvenance.
        Unique identifier of the build.

        :return: The id of this ApiBuildProvenance.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """
        Sets the id of this ApiBuildProvenance.
        Unique identifier of the build.

        :param id: The id of this ApiBuildProvenance.
        :type id: str
        """

        self._id = id

    @property
    def project_id(self) -> str:
        """
        Gets the project_id of this ApiBuildProvenance.
        ID of the project.

        :return: The project_id of this ApiBuildProvenance.
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id: str):
        """
        Sets the project_id of this ApiBuildProvenance.
        ID of the project.

        :param project_id: The project_id of this ApiBuildProvenance.
        :type project_id: str
        """

        self._project_id = project_id

    @property
    def commands(self) -> List[ApiCommand]:
        """
        Gets the commands of this ApiBuildProvenance.
        Commands requested by the build.

        :return: The commands of this ApiBuildProvenance.
        :rtype: List[ApiCommand]
        """
        return self._commands

    @commands.setter
    def commands(self, commands: List[ApiCommand]):
        """
        Sets the commands of this ApiBuildProvenance.
        Commands requested by the build.

        :param commands: The commands of this ApiBuildProvenance.
        :type commands: List[ApiCommand]
        """

        self._commands = commands

    @property
    def built_artifacts(self) -> List[ApiArtifact]:
        """
        Gets the built_artifacts of this ApiBuildProvenance.
        Output of the build.

        :return: The built_artifacts of this ApiBuildProvenance.
        :rtype: List[ApiArtifact]
        """
        return self._built_artifacts

    @built_artifacts.setter
    def built_artifacts(self, built_artifacts: List[ApiArtifact]):
        """
        Sets the built_artifacts of this ApiBuildProvenance.
        Output of the build.

        :param built_artifacts: The built_artifacts of this ApiBuildProvenance.
        :type built_artifacts: List[ApiArtifact]
        """

        self._built_artifacts = built_artifacts

    @property
    def create_time(self) -> datetime:
        """
        Gets the create_time of this ApiBuildProvenance.
        Time at which the build was created.

        :return: The create_time of this ApiBuildProvenance.
        :rtype: datetime
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time: datetime):
        """
        Sets the create_time of this ApiBuildProvenance.
        Time at which the build was created.

        :param create_time: The create_time of this ApiBuildProvenance.
        :type create_time: datetime
        """

        self._create_time = create_time

    @property
    def start_time(self) -> datetime:
        """
        Gets the start_time of this ApiBuildProvenance.
        Time at which execution of the build was started.

        :return: The start_time of this ApiBuildProvenance.
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time: datetime):
        """
        Sets the start_time of this ApiBuildProvenance.
        Time at which execution of the build was started.

        :param start_time: The start_time of this ApiBuildProvenance.
        :type start_time: datetime
        """

        self._start_time = start_time

    @property
    def finish_time(self) -> datetime:
        """
        Gets the finish_time of this ApiBuildProvenance.
        Time at which execution of the build was finished.

        :return: The finish_time of this ApiBuildProvenance.
        :rtype: datetime
        """
        return self._finish_time

    @finish_time.setter
    def finish_time(self, finish_time: datetime):
        """
        Sets the finish_time of this ApiBuildProvenance.
        Time at which execution of the build was finished.

        :param finish_time: The finish_time of this ApiBuildProvenance.
        :type finish_time: datetime
        """

        self._finish_time = finish_time

    @property
    def creator(self) -> str:
        """
        Gets the creator of this ApiBuildProvenance.
        E-mail address of the user who initiated this build. Note that this was the user's e-mail address at the time the build was initiated; this address may not represent the same end-user for all time.

        :return: The creator of this ApiBuildProvenance.
        :rtype: str
        """
        return self._creator

    @creator.setter
    def creator(self, creator: str):
        """
        Sets the creator of this ApiBuildProvenance.
        E-mail address of the user who initiated this build. Note that this was the user's e-mail address at the time the build was initiated; this address may not represent the same end-user for all time.

        :param creator: The creator of this ApiBuildProvenance.
        :type creator: str
        """

        self._creator = creator

    @property
    def logs_bucket(self) -> str:
        """
        Gets the logs_bucket of this ApiBuildProvenance.
        Google Cloud Storage bucket where logs were written.

        :return: The logs_bucket of this ApiBuildProvenance.
        :rtype: str
        """
        return self._logs_bucket

    @logs_bucket.setter
    def logs_bucket(self, logs_bucket: str):
        """
        Sets the logs_bucket of this ApiBuildProvenance.
        Google Cloud Storage bucket where logs were written.

        :param logs_bucket: The logs_bucket of this ApiBuildProvenance.
        :type logs_bucket: str
        """

        self._logs_bucket = logs_bucket

    @property
    def source_provenance(self) -> ApiSource:
        """
        Gets the source_provenance of this ApiBuildProvenance.
        Details of the Source input to the build.

        :return: The source_provenance of this ApiBuildProvenance.
        :rtype: ApiSource
        """
        return self._source_provenance

    @source_provenance.setter
    def source_provenance(self, source_provenance: ApiSource):
        """
        Sets the source_provenance of this ApiBuildProvenance.
        Details of the Source input to the build.

        :param source_provenance: The source_provenance of this ApiBuildProvenance.
        :type source_provenance: ApiSource
        """

        self._source_provenance = source_provenance

    @property
    def trigger_id(self) -> str:
        """
        Gets the trigger_id of this ApiBuildProvenance.
        Trigger identifier if the build was triggered automatically; empty if not.

        :return: The trigger_id of this ApiBuildProvenance.
        :rtype: str
        """
        return self._trigger_id

    @trigger_id.setter
    def trigger_id(self, trigger_id: str):
        """
        Sets the trigger_id of this ApiBuildProvenance.
        Trigger identifier if the build was triggered automatically; empty if not.

        :param trigger_id: The trigger_id of this ApiBuildProvenance.
        :type trigger_id: str
        """

        self._trigger_id = trigger_id

    @property
    def build_options(self) -> Dict[str, str]:
        """
        Gets the build_options of this ApiBuildProvenance.
        Special options applied to this build. This is a catch-all field where build providers can enter any desired additional details.

        :return: The build_options of this ApiBuildProvenance.
        :rtype: Dict[str, str]
        """
        return self._build_options

    @build_options.setter
    def build_options(self, build_options: Dict[str, str]):
        """
        Sets the build_options of this ApiBuildProvenance.
        Special options applied to this build. This is a catch-all field where build providers can enter any desired additional details.

        :param build_options: The build_options of this ApiBuildProvenance.
        :type build_options: Dict[str, str]
        """

        self._build_options = build_options

    @property
    def builder_version(self) -> str:
        """
        Gets the builder_version of this ApiBuildProvenance.
        Version string of the builder at the time this build was executed.

        :return: The builder_version of this ApiBuildProvenance.
        :rtype: str
        """
        return self._builder_version

    @builder_version.setter
    def builder_version(self, builder_version: str):
        """
        Sets the builder_version of this ApiBuildProvenance.
        Version string of the builder at the time this build was executed.

        :param builder_version: The builder_version of this ApiBuildProvenance.
        :type builder_version: str
        """

        self._builder_version = builder_version

