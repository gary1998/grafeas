# coding: utf-8

from __future__ import absolute_import
from swagger_server.models.build_signature_key_type import BuildSignatureKeyType
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class ApiBuildSignature(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, public_key: str=None, signature: str=None, key_id: str=None, key_type: BuildSignatureKeyType=None):
        """
        ApiBuildSignature - a model defined in Swagger

        :param public_key: The public_key of this ApiBuildSignature.
        :type public_key: str
        :param signature: The signature of this ApiBuildSignature.
        :type signature: str
        :param key_id: The key_id of this ApiBuildSignature.
        :type key_id: str
        :param key_type: The key_type of this ApiBuildSignature.
        :type key_type: BuildSignatureKeyType
        """
        self.swagger_types = {
            'public_key': str,
            'signature': str,
            'key_id': str,
            'key_type': BuildSignatureKeyType
        }

        self.attribute_map = {
            'public_key': 'public_key',
            'signature': 'signature',
            'key_id': 'key_id',
            'key_type': 'key_type'
        }

        self._public_key = public_key
        self._signature = signature
        self._key_id = key_id
        self._key_type = key_type

    @classmethod
    def from_dict(cls, dikt) -> 'ApiBuildSignature':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The apiBuildSignature of this ApiBuildSignature.
        :rtype: ApiBuildSignature
        """
        return deserialize_model(dikt, cls)

    @property
    def public_key(self) -> str:
        """
        Gets the public_key of this ApiBuildSignature.
        Public key of the builder which can be used to verify that the related findings are valid and unchanged. If `key_type` is empty, this defaults to PEM encoded public keys.  This field may be empty if `key_id` references an external key.  For Cloud Container Builder based signatures, this is a PEM encoded public key. To verify the Cloud Container Builder signature, place the contents of this field into a file (public.pem). The signature field is base64-decoded into its binary representation in signature.bin, and the provenance bytes from `BuildDetails` are base64-decoded into a binary representation in signed.bin. OpenSSL can then verify the signature: `openssl sha256 -verify public.pem -signature signature.bin signed.bin`

        :return: The public_key of this ApiBuildSignature.
        :rtype: str
        """
        return self._public_key

    @public_key.setter
    def public_key(self, public_key: str):
        """
        Sets the public_key of this ApiBuildSignature.
        Public key of the builder which can be used to verify that the related findings are valid and unchanged. If `key_type` is empty, this defaults to PEM encoded public keys.  This field may be empty if `key_id` references an external key.  For Cloud Container Builder based signatures, this is a PEM encoded public key. To verify the Cloud Container Builder signature, place the contents of this field into a file (public.pem). The signature field is base64-decoded into its binary representation in signature.bin, and the provenance bytes from `BuildDetails` are base64-decoded into a binary representation in signed.bin. OpenSSL can then verify the signature: `openssl sha256 -verify public.pem -signature signature.bin signed.bin`

        :param public_key: The public_key of this ApiBuildSignature.
        :type public_key: str
        """

        self._public_key = public_key

    @property
    def signature(self) -> str:
        """
        Gets the signature of this ApiBuildSignature.
        Signature of the related `BuildProvenance`, encoded in a base64 string.

        :return: The signature of this ApiBuildSignature.
        :rtype: str
        """
        return self._signature

    @signature.setter
    def signature(self, signature: str):
        """
        Sets the signature of this ApiBuildSignature.
        Signature of the related `BuildProvenance`, encoded in a base64 string.

        :param signature: The signature of this ApiBuildSignature.
        :type signature: str
        """

        self._signature = signature

    @property
    def key_id(self) -> str:
        """
        Gets the key_id of this ApiBuildSignature.
        An Id for the key used to sign. This could be either an Id for the key stored in `public_key` (such as the Id or fingerprint for a PGP key, or the CN for a cert), or a reference to an external key (such as a reference to a key in Cloud Key Management Service).

        :return: The key_id of this ApiBuildSignature.
        :rtype: str
        """
        return self._key_id

    @key_id.setter
    def key_id(self, key_id: str):
        """
        Sets the key_id of this ApiBuildSignature.
        An Id for the key used to sign. This could be either an Id for the key stored in `public_key` (such as the Id or fingerprint for a PGP key, or the CN for a cert), or a reference to an external key (such as a reference to a key in Cloud Key Management Service).

        :param key_id: The key_id of this ApiBuildSignature.
        :type key_id: str
        """

        self._key_id = key_id

    @property
    def key_type(self) -> BuildSignatureKeyType:
        """
        Gets the key_type of this ApiBuildSignature.

        :return: The key_type of this ApiBuildSignature.
        :rtype: BuildSignatureKeyType
        """
        return self._key_type

    @key_type.setter
    def key_type(self, key_type: BuildSignatureKeyType):
        """
        Sets the key_type of this ApiBuildSignature.

        :param key_type: The key_type of this ApiBuildSignature.
        :type key_type: BuildSignatureKeyType
        """

        self._key_type = key_type

