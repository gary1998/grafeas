# coding: utf-8

from __future__ import absolute_import
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class ApiCommand(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, name: str=None, env: List[str]=None, args: List[str]=None, dir: str=None, id: str=None, wait_for: List[str]=None):
        """
        ApiCommand - a model defined in Swagger

        :param name: The name of this ApiCommand.
        :type name: str
        :param env: The env of this ApiCommand.
        :type env: List[str]
        :param args: The args of this ApiCommand.
        :type args: List[str]
        :param dir: The dir of this ApiCommand.
        :type dir: str
        :param id: The id of this ApiCommand.
        :type id: str
        :param wait_for: The wait_for of this ApiCommand.
        :type wait_for: List[str]
        """
        self.swagger_types = {
            'name': str,
            'env': List[str],
            'args': List[str],
            'dir': str,
            'id': str,
            'wait_for': List[str]
        }

        self.attribute_map = {
            'name': 'name',
            'env': 'env',
            'args': 'args',
            'dir': 'dir',
            'id': 'id',
            'wait_for': 'wait_for'
        }

        self._name = name
        self._env = env
        self._args = args
        self._dir = dir
        self._id = id
        self._wait_for = wait_for

    @classmethod
    def from_dict(cls, dikt) -> 'ApiCommand':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The apiCommand of this ApiCommand.
        :rtype: ApiCommand
        """
        return deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """
        Gets the name of this ApiCommand.
        Name of the command, as presented on the command line, or if the command is packaged as a Docker container, as presented to `docker pull`.

        :return: The name of this ApiCommand.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """
        Sets the name of this ApiCommand.
        Name of the command, as presented on the command line, or if the command is packaged as a Docker container, as presented to `docker pull`.

        :param name: The name of this ApiCommand.
        :type name: str
        """

        self._name = name

    @property
    def env(self) -> List[str]:
        """
        Gets the env of this ApiCommand.
        Environment variables set before running this Command.

        :return: The env of this ApiCommand.
        :rtype: List[str]
        """
        return self._env

    @env.setter
    def env(self, env: List[str]):
        """
        Sets the env of this ApiCommand.
        Environment variables set before running this Command.

        :param env: The env of this ApiCommand.
        :type env: List[str]
        """

        self._env = env

    @property
    def args(self) -> List[str]:
        """
        Gets the args of this ApiCommand.
        Command-line arguments used when executing this Command.

        :return: The args of this ApiCommand.
        :rtype: List[str]
        """
        return self._args

    @args.setter
    def args(self, args: List[str]):
        """
        Sets the args of this ApiCommand.
        Command-line arguments used when executing this Command.

        :param args: The args of this ApiCommand.
        :type args: List[str]
        """

        self._args = args

    @property
    def dir(self) -> str:
        """
        Gets the dir of this ApiCommand.
        Working directory (relative to project source root) used when running this Command.

        :return: The dir of this ApiCommand.
        :rtype: str
        """
        return self._dir

    @dir.setter
    def dir(self, dir: str):
        """
        Sets the dir of this ApiCommand.
        Working directory (relative to project source root) used when running this Command.

        :param dir: The dir of this ApiCommand.
        :type dir: str
        """

        self._dir = dir

    @property
    def id(self) -> str:
        """
        Gets the id of this ApiCommand.
        Optional unique identifier for this Command, used in wait_for to reference this Command as a dependency.

        :return: The id of this ApiCommand.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """
        Sets the id of this ApiCommand.
        Optional unique identifier for this Command, used in wait_for to reference this Command as a dependency.

        :param id: The id of this ApiCommand.
        :type id: str
        """

        self._id = id

    @property
    def wait_for(self) -> List[str]:
        """
        Gets the wait_for of this ApiCommand.
        The ID(s) of the Command(s) that this Command depends on.

        :return: The wait_for of this ApiCommand.
        :rtype: List[str]
        """
        return self._wait_for

    @wait_for.setter
    def wait_for(self, wait_for: List[str]):
        """
        Sets the wait_for of this ApiCommand.
        The ID(s) of the Command(s) that this Command depends on.

        :param wait_for: The wait_for of this ApiCommand.
        :type wait_for: List[str]
        """

        self._wait_for = wait_for

