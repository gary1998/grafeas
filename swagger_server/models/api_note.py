# coding: utf-8

from __future__ import absolute_import
from swagger_server.models.api_build_type import ApiBuildType
from swagger_server.models.api_deployable import ApiDeployable
from swagger_server.models.api_discovery import ApiDiscovery
from swagger_server.models.api_note_kind import ApiNoteKind
from swagger_server.models.api_vulnerability_type import ApiVulnerabilityType
from swagger_server.models.docker_image_basis import DockerImageBasis
from swagger_server.models.note_related_url import NoteRelatedUrl
from swagger_server.models.package_manager_package import PackageManagerPackage
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class ApiNote(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, name: str=None, short_description: str=None, long_description: str=None, kind: ApiNoteKind=None, vulnerability_type: ApiVulnerabilityType=None, build_type: ApiBuildType=None, base_image: DockerImageBasis=None, package: PackageManagerPackage=None, deployable: ApiDeployable=None, discovery: ApiDiscovery=None, related_url: List[NoteRelatedUrl]=None, expiration_time: datetime=None, create_time: datetime=None, update_time: datetime=None):
        """
        ApiNote - a model defined in Swagger

        :param name: The name of this ApiNote.
        :type name: str
        :param short_description: The short_description of this ApiNote.
        :type short_description: str
        :param long_description: The long_description of this ApiNote.
        :type long_description: str
        :param kind: The kind of this ApiNote.
        :type kind: ApiNoteKind
        :param vulnerability_type: The vulnerability_type of this ApiNote.
        :type vulnerability_type: ApiVulnerabilityType
        :param build_type: The build_type of this ApiNote.
        :type build_type: ApiBuildType
        :param base_image: The base_image of this ApiNote.
        :type base_image: DockerImageBasis
        :param package: The package of this ApiNote.
        :type package: PackageManagerPackage
        :param deployable: The deployable of this ApiNote.
        :type deployable: ApiDeployable
        :param discovery: The discovery of this ApiNote.
        :type discovery: ApiDiscovery
        :param related_url: The related_url of this ApiNote.
        :type related_url: List[NoteRelatedUrl]
        :param expiration_time: The expiration_time of this ApiNote.
        :type expiration_time: datetime
        :param create_time: The create_time of this ApiNote.
        :type create_time: datetime
        :param update_time: The update_time of this ApiNote.
        :type update_time: datetime
        """
        self.swagger_types = {
            'name': str,
            'short_description': str,
            'long_description': str,
            'kind': ApiNoteKind,
            'vulnerability_type': ApiVulnerabilityType,
            'build_type': ApiBuildType,
            'base_image': DockerImageBasis,
            'package': PackageManagerPackage,
            'deployable': ApiDeployable,
            'discovery': ApiDiscovery,
            'related_url': List[NoteRelatedUrl],
            'expiration_time': datetime,
            'create_time': datetime,
            'update_time': datetime
        }

        self.attribute_map = {
            'name': 'name',
            'short_description': 'short_description',
            'long_description': 'long_description',
            'kind': 'kind',
            'vulnerability_type': 'vulnerability_type',
            'build_type': 'build_type',
            'base_image': 'base_image',
            'package': 'package',
            'deployable': 'deployable',
            'discovery': 'discovery',
            'related_url': 'related_url',
            'expiration_time': 'expiration_time',
            'create_time': 'create_time',
            'update_time': 'update_time'
        }

        self._name = name
        self._short_description = short_description
        self._long_description = long_description
        self._kind = kind
        self._vulnerability_type = vulnerability_type
        self._build_type = build_type
        self._base_image = base_image
        self._package = package
        self._deployable = deployable
        self._discovery = discovery
        self._related_url = related_url
        self._expiration_time = expiration_time
        self._create_time = create_time
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt) -> 'ApiNote':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The apiNote of this ApiNote.
        :rtype: ApiNote
        """
        return deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """
        Gets the name of this ApiNote.

        :return: The name of this ApiNote.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """
        Sets the name of this ApiNote.

        :param name: The name of this ApiNote.
        :type name: str
        """

        self._name = name

    @property
    def short_description(self) -> str:
        """
        Gets the short_description of this ApiNote.
        A one sentence description of this `Note`.

        :return: The short_description of this ApiNote.
        :rtype: str
        """
        return self._short_description

    @short_description.setter
    def short_description(self, short_description: str):
        """
        Sets the short_description of this ApiNote.
        A one sentence description of this `Note`.

        :param short_description: The short_description of this ApiNote.
        :type short_description: str
        """

        self._short_description = short_description

    @property
    def long_description(self) -> str:
        """
        Gets the long_description of this ApiNote.
        A detailed description of this `Note`.

        :return: The long_description of this ApiNote.
        :rtype: str
        """
        return self._long_description

    @long_description.setter
    def long_description(self, long_description: str):
        """
        Sets the long_description of this ApiNote.
        A detailed description of this `Note`.

        :param long_description: The long_description of this ApiNote.
        :type long_description: str
        """

        self._long_description = long_description

    @property
    def kind(self) -> ApiNoteKind:
        """
        Gets the kind of this ApiNote.
        Output only. This explicitly denotes which kind of note is specified. This field can be used as a filter in list requests.

        :return: The kind of this ApiNote.
        :rtype: ApiNoteKind
        """
        return self._kind

    @kind.setter
    def kind(self, kind: ApiNoteKind):
        """
        Sets the kind of this ApiNote.
        Output only. This explicitly denotes which kind of note is specified. This field can be used as a filter in list requests.

        :param kind: The kind of this ApiNote.
        :type kind: ApiNoteKind
        """

        self._kind = kind

    @property
    def vulnerability_type(self) -> ApiVulnerabilityType:
        """
        Gets the vulnerability_type of this ApiNote.
        A package vulnerability type of note.

        :return: The vulnerability_type of this ApiNote.
        :rtype: ApiVulnerabilityType
        """
        return self._vulnerability_type

    @vulnerability_type.setter
    def vulnerability_type(self, vulnerability_type: ApiVulnerabilityType):
        """
        Sets the vulnerability_type of this ApiNote.
        A package vulnerability type of note.

        :param vulnerability_type: The vulnerability_type of this ApiNote.
        :type vulnerability_type: ApiVulnerabilityType
        """

        self._vulnerability_type = vulnerability_type

    @property
    def build_type(self) -> ApiBuildType:
        """
        Gets the build_type of this ApiNote.
        Build provenance type for a verifiable build.

        :return: The build_type of this ApiNote.
        :rtype: ApiBuildType
        """
        return self._build_type

    @build_type.setter
    def build_type(self, build_type: ApiBuildType):
        """
        Sets the build_type of this ApiNote.
        Build provenance type for a verifiable build.

        :param build_type: The build_type of this ApiNote.
        :type build_type: ApiBuildType
        """

        self._build_type = build_type

    @property
    def base_image(self) -> DockerImageBasis:
        """
        Gets the base_image of this ApiNote.
        A note describing a base image.

        :return: The base_image of this ApiNote.
        :rtype: DockerImageBasis
        """
        return self._base_image

    @base_image.setter
    def base_image(self, base_image: DockerImageBasis):
        """
        Sets the base_image of this ApiNote.
        A note describing a base image.

        :param base_image: The base_image of this ApiNote.
        :type base_image: DockerImageBasis
        """

        self._base_image = base_image

    @property
    def package(self) -> PackageManagerPackage:
        """
        Gets the package of this ApiNote.
        A note describing a package hosted by various package managers.

        :return: The package of this ApiNote.
        :rtype: PackageManagerPackage
        """
        return self._package

    @package.setter
    def package(self, package: PackageManagerPackage):
        """
        Sets the package of this ApiNote.
        A note describing a package hosted by various package managers.

        :param package: The package of this ApiNote.
        :type package: PackageManagerPackage
        """

        self._package = package

    @property
    def deployable(self) -> ApiDeployable:
        """
        Gets the deployable of this ApiNote.
        A note describing something that can be deployed.

        :return: The deployable of this ApiNote.
        :rtype: ApiDeployable
        """
        return self._deployable

    @deployable.setter
    def deployable(self, deployable: ApiDeployable):
        """
        Sets the deployable of this ApiNote.
        A note describing something that can be deployed.

        :param deployable: The deployable of this ApiNote.
        :type deployable: ApiDeployable
        """

        self._deployable = deployable

    @property
    def discovery(self) -> ApiDiscovery:
        """
        Gets the discovery of this ApiNote.
        A note describing a provider/analysis type.

        :return: The discovery of this ApiNote.
        :rtype: ApiDiscovery
        """
        return self._discovery

    @discovery.setter
    def discovery(self, discovery: ApiDiscovery):
        """
        Sets the discovery of this ApiNote.
        A note describing a provider/analysis type.

        :param discovery: The discovery of this ApiNote.
        :type discovery: ApiDiscovery
        """

        self._discovery = discovery

    @property
    def related_url(self) -> List[NoteRelatedUrl]:
        """
        Gets the related_url of this ApiNote.

        :return: The related_url of this ApiNote.
        :rtype: List[NoteRelatedUrl]
        """
        return self._related_url

    @related_url.setter
    def related_url(self, related_url: List[NoteRelatedUrl]):
        """
        Sets the related_url of this ApiNote.

        :param related_url: The related_url of this ApiNote.
        :type related_url: List[NoteRelatedUrl]
        """

        self._related_url = related_url

    @property
    def expiration_time(self) -> datetime:
        """
        Gets the expiration_time of this ApiNote.
        Time of expiration for this note, null if note does not expire.

        :return: The expiration_time of this ApiNote.
        :rtype: datetime
        """
        return self._expiration_time

    @expiration_time.setter
    def expiration_time(self, expiration_time: datetime):
        """
        Sets the expiration_time of this ApiNote.
        Time of expiration for this note, null if note does not expire.

        :param expiration_time: The expiration_time of this ApiNote.
        :type expiration_time: datetime
        """

        self._expiration_time = expiration_time

    @property
    def create_time(self) -> datetime:
        """
        Gets the create_time of this ApiNote.
        Output only. The time this note was created. This field can be used as a filter in list requests.

        :return: The create_time of this ApiNote.
        :rtype: datetime
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time: datetime):
        """
        Sets the create_time of this ApiNote.
        Output only. The time this note was created. This field can be used as a filter in list requests.

        :param create_time: The create_time of this ApiNote.
        :type create_time: datetime
        """

        self._create_time = create_time

    @property
    def update_time(self) -> datetime:
        """
        Gets the update_time of this ApiNote.
        Output only. The time this note was last updated. This field can be used as a filter in list requests.

        :return: The update_time of this ApiNote.
        :rtype: datetime
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time: datetime):
        """
        Sets the update_time of this ApiNote.
        Output only. The time this note was last updated. This field can be used as a filter in list requests.

        :param update_time: The update_time of this ApiNote.
        :type update_time: datetime
        """

        self._update_time = update_time

