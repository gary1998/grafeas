# coding: utf-8

from __future__ import absolute_import
from swagger_server.models.api_file_hashes import ApiFileHashes
from swagger_server.models.api_repo_source import ApiRepoSource
from swagger_server.models.api_source_context import ApiSourceContext
from swagger_server.models.api_storage_source import ApiStorageSource
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class ApiSource(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, storage_source: ApiStorageSource=None, repo_source: ApiRepoSource=None, artifact_storage_source: ApiStorageSource=None, file_hashes: Dict[str, ApiFileHashes]=None, context: ApiSourceContext=None, additional_contexts: List[ApiSourceContext]=None):
        """
        ApiSource - a model defined in Swagger

        :param storage_source: The storage_source of this ApiSource.
        :type storage_source: ApiStorageSource
        :param repo_source: The repo_source of this ApiSource.
        :type repo_source: ApiRepoSource
        :param artifact_storage_source: The artifact_storage_source of this ApiSource.
        :type artifact_storage_source: ApiStorageSource
        :param file_hashes: The file_hashes of this ApiSource.
        :type file_hashes: Dict[str, ApiFileHashes]
        :param context: The context of this ApiSource.
        :type context: ApiSourceContext
        :param additional_contexts: The additional_contexts of this ApiSource.
        :type additional_contexts: List[ApiSourceContext]
        """
        self.swagger_types = {
            'storage_source': ApiStorageSource,
            'repo_source': ApiRepoSource,
            'artifact_storage_source': ApiStorageSource,
            'file_hashes': Dict[str, ApiFileHashes],
            'context': ApiSourceContext,
            'additional_contexts': List[ApiSourceContext]
        }

        self.attribute_map = {
            'storage_source': 'storage_source',
            'repo_source': 'repo_source',
            'artifact_storage_source': 'artifact_storage_source',
            'file_hashes': 'file_hashes',
            'context': 'context',
            'additional_contexts': 'additional_contexts'
        }

        self._storage_source = storage_source
        self._repo_source = repo_source
        self._artifact_storage_source = artifact_storage_source
        self._file_hashes = file_hashes
        self._context = context
        self._additional_contexts = additional_contexts

    @classmethod
    def from_dict(cls, dikt) -> 'ApiSource':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The apiSource of this ApiSource.
        :rtype: ApiSource
        """
        return deserialize_model(dikt, cls)

    @property
    def storage_source(self) -> ApiStorageSource:
        """
        Gets the storage_source of this ApiSource.
        If provided, get the source from this location in in Google Cloud Storage.

        :return: The storage_source of this ApiSource.
        :rtype: ApiStorageSource
        """
        return self._storage_source

    @storage_source.setter
    def storage_source(self, storage_source: ApiStorageSource):
        """
        Sets the storage_source of this ApiSource.
        If provided, get the source from this location in in Google Cloud Storage.

        :param storage_source: The storage_source of this ApiSource.
        :type storage_source: ApiStorageSource
        """

        self._storage_source = storage_source

    @property
    def repo_source(self) -> ApiRepoSource:
        """
        Gets the repo_source of this ApiSource.
        If provided, get source from this location in a Cloud Repo.

        :return: The repo_source of this ApiSource.
        :rtype: ApiRepoSource
        """
        return self._repo_source

    @repo_source.setter
    def repo_source(self, repo_source: ApiRepoSource):
        """
        Sets the repo_source of this ApiSource.
        If provided, get source from this location in a Cloud Repo.

        :param repo_source: The repo_source of this ApiSource.
        :type repo_source: ApiRepoSource
        """

        self._repo_source = repo_source

    @property
    def artifact_storage_source(self) -> ApiStorageSource:
        """
        Gets the artifact_storage_source of this ApiSource.
        If provided, the input binary artifacts for the build came from this location.

        :return: The artifact_storage_source of this ApiSource.
        :rtype: ApiStorageSource
        """
        return self._artifact_storage_source

    @artifact_storage_source.setter
    def artifact_storage_source(self, artifact_storage_source: ApiStorageSource):
        """
        Sets the artifact_storage_source of this ApiSource.
        If provided, the input binary artifacts for the build came from this location.

        :param artifact_storage_source: The artifact_storage_source of this ApiSource.
        :type artifact_storage_source: ApiStorageSource
        """

        self._artifact_storage_source = artifact_storage_source

    @property
    def file_hashes(self) -> Dict[str, ApiFileHashes]:
        """
        Gets the file_hashes of this ApiSource.
        Hash(es) of the build source, which can be used to verify that the original source integrity was maintained in the build.  The keys to this map are file paths used as build source and the values contain the hash values for those files.  If the build source came in a single package such as a gzipped tarfile (.tar.gz), the FileHash will be for the single path to that file.

        :return: The file_hashes of this ApiSource.
        :rtype: Dict[str, ApiFileHashes]
        """
        return self._file_hashes

    @file_hashes.setter
    def file_hashes(self, file_hashes: Dict[str, ApiFileHashes]):
        """
        Sets the file_hashes of this ApiSource.
        Hash(es) of the build source, which can be used to verify that the original source integrity was maintained in the build.  The keys to this map are file paths used as build source and the values contain the hash values for those files.  If the build source came in a single package such as a gzipped tarfile (.tar.gz), the FileHash will be for the single path to that file.

        :param file_hashes: The file_hashes of this ApiSource.
        :type file_hashes: Dict[str, ApiFileHashes]
        """

        self._file_hashes = file_hashes

    @property
    def context(self) -> ApiSourceContext:
        """
        Gets the context of this ApiSource.
        If provided, the source code used for the build came from this location.

        :return: The context of this ApiSource.
        :rtype: ApiSourceContext
        """
        return self._context

    @context.setter
    def context(self, context: ApiSourceContext):
        """
        Sets the context of this ApiSource.
        If provided, the source code used for the build came from this location.

        :param context: The context of this ApiSource.
        :type context: ApiSourceContext
        """

        self._context = context

    @property
    def additional_contexts(self) -> List[ApiSourceContext]:
        """
        Gets the additional_contexts of this ApiSource.
        If provided, some of the source code used for the build may be found in these locations, in the case where the source repository had multiple remotes or submodules. This list will not include the context specified in the context field.

        :return: The additional_contexts of this ApiSource.
        :rtype: List[ApiSourceContext]
        """
        return self._additional_contexts

    @additional_contexts.setter
    def additional_contexts(self, additional_contexts: List[ApiSourceContext]):
        """
        Sets the additional_contexts of this ApiSource.
        If provided, some of the source code used for the build may be found in these locations, in the case where the source repository had multiple remotes or submodules. This list will not include the context specified in the context field.

        :param additional_contexts: The additional_contexts of this ApiSource.
        :type additional_contexts: List[ApiSourceContext]
        """

        self._additional_contexts = additional_contexts

