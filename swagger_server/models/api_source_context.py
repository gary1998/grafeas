# coding: utf-8

from __future__ import absolute_import
from swagger_server.models.api_cloud_repo_source_context import ApiCloudRepoSourceContext
from swagger_server.models.api_gerrit_source_context import ApiGerritSourceContext
from swagger_server.models.api_git_source_context import ApiGitSourceContext
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class ApiSourceContext(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, cloud_repo: ApiCloudRepoSourceContext=None, gerrit: ApiGerritSourceContext=None, git: ApiGitSourceContext=None, labels: Dict[str, str]=None):
        """
        ApiSourceContext - a model defined in Swagger

        :param cloud_repo: The cloud_repo of this ApiSourceContext.
        :type cloud_repo: ApiCloudRepoSourceContext
        :param gerrit: The gerrit of this ApiSourceContext.
        :type gerrit: ApiGerritSourceContext
        :param git: The git of this ApiSourceContext.
        :type git: ApiGitSourceContext
        :param labels: The labels of this ApiSourceContext.
        :type labels: Dict[str, str]
        """
        self.swagger_types = {
            'cloud_repo': ApiCloudRepoSourceContext,
            'gerrit': ApiGerritSourceContext,
            'git': ApiGitSourceContext,
            'labels': Dict[str, str]
        }

        self.attribute_map = {
            'cloud_repo': 'cloud_repo',
            'gerrit': 'gerrit',
            'git': 'git',
            'labels': 'labels'
        }

        self._cloud_repo = cloud_repo
        self._gerrit = gerrit
        self._git = git
        self._labels = labels

    @classmethod
    def from_dict(cls, dikt) -> 'ApiSourceContext':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The apiSourceContext of this ApiSourceContext.
        :rtype: ApiSourceContext
        """
        return deserialize_model(dikt, cls)

    @property
    def cloud_repo(self) -> ApiCloudRepoSourceContext:
        """
        Gets the cloud_repo of this ApiSourceContext.
        A SourceContext referring to a revision in a Google Cloud Source Repo.

        :return: The cloud_repo of this ApiSourceContext.
        :rtype: ApiCloudRepoSourceContext
        """
        return self._cloud_repo

    @cloud_repo.setter
    def cloud_repo(self, cloud_repo: ApiCloudRepoSourceContext):
        """
        Sets the cloud_repo of this ApiSourceContext.
        A SourceContext referring to a revision in a Google Cloud Source Repo.

        :param cloud_repo: The cloud_repo of this ApiSourceContext.
        :type cloud_repo: ApiCloudRepoSourceContext
        """

        self._cloud_repo = cloud_repo

    @property
    def gerrit(self) -> ApiGerritSourceContext:
        """
        Gets the gerrit of this ApiSourceContext.
        A SourceContext referring to a Gerrit project.

        :return: The gerrit of this ApiSourceContext.
        :rtype: ApiGerritSourceContext
        """
        return self._gerrit

    @gerrit.setter
    def gerrit(self, gerrit: ApiGerritSourceContext):
        """
        Sets the gerrit of this ApiSourceContext.
        A SourceContext referring to a Gerrit project.

        :param gerrit: The gerrit of this ApiSourceContext.
        :type gerrit: ApiGerritSourceContext
        """

        self._gerrit = gerrit

    @property
    def git(self) -> ApiGitSourceContext:
        """
        Gets the git of this ApiSourceContext.
        A SourceContext referring to any third party Git repo (e.g., GitHub).

        :return: The git of this ApiSourceContext.
        :rtype: ApiGitSourceContext
        """
        return self._git

    @git.setter
    def git(self, git: ApiGitSourceContext):
        """
        Sets the git of this ApiSourceContext.
        A SourceContext referring to any third party Git repo (e.g., GitHub).

        :param git: The git of this ApiSourceContext.
        :type git: ApiGitSourceContext
        """

        self._git = git

    @property
    def labels(self) -> Dict[str, str]:
        """
        Gets the labels of this ApiSourceContext.
        Labels with user defined metadata.

        :return: The labels of this ApiSourceContext.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels: Dict[str, str]):
        """
        Sets the labels of this ApiSourceContext.
        Labels with user defined metadata.

        :param labels: The labels of this ApiSourceContext.
        :type labels: Dict[str, str]
        """

        self._labels = labels

