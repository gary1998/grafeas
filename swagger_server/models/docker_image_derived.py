# coding: utf-8

from __future__ import absolute_import
from swagger_server.models.docker_image_fingerprint import DockerImageFingerprint
from swagger_server.models.docker_image_layer import DockerImageLayer
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class DockerImageDerived(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, fingerprint: DockerImageFingerprint=None, distance: int=None, layer_info: List[DockerImageLayer]=None, base_resource_url: str=None):
        """
        DockerImageDerived - a model defined in Swagger

        :param fingerprint: The fingerprint of this DockerImageDerived.
        :type fingerprint: DockerImageFingerprint
        :param distance: The distance of this DockerImageDerived.
        :type distance: int
        :param layer_info: The layer_info of this DockerImageDerived.
        :type layer_info: List[DockerImageLayer]
        :param base_resource_url: The base_resource_url of this DockerImageDerived.
        :type base_resource_url: str
        """
        self.swagger_types = {
            'fingerprint': DockerImageFingerprint,
            'distance': int,
            'layer_info': List[DockerImageLayer],
            'base_resource_url': str
        }

        self.attribute_map = {
            'fingerprint': 'fingerprint',
            'distance': 'distance',
            'layer_info': 'layer_info',
            'base_resource_url': 'base_resource_url'
        }

        self._fingerprint = fingerprint
        self._distance = distance
        self._layer_info = layer_info
        self._base_resource_url = base_resource_url

    @classmethod
    def from_dict(cls, dikt) -> 'DockerImageDerived':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The DockerImageDerived of this DockerImageDerived.
        :rtype: DockerImageDerived
        """
        return deserialize_model(dikt, cls)

    @property
    def fingerprint(self) -> DockerImageFingerprint:
        """
        Gets the fingerprint of this DockerImageDerived.

        :return: The fingerprint of this DockerImageDerived.
        :rtype: DockerImageFingerprint
        """
        return self._fingerprint

    @fingerprint.setter
    def fingerprint(self, fingerprint: DockerImageFingerprint):
        """
        Sets the fingerprint of this DockerImageDerived.

        :param fingerprint: The fingerprint of this DockerImageDerived.
        :type fingerprint: DockerImageFingerprint
        """

        self._fingerprint = fingerprint

    @property
    def distance(self) -> int:
        """
        Gets the distance of this DockerImageDerived.
        Output only. The number of layers by which this image differs from the associated image basis.

        :return: The distance of this DockerImageDerived.
        :rtype: int
        """
        return self._distance

    @distance.setter
    def distance(self, distance: int):
        """
        Sets the distance of this DockerImageDerived.
        Output only. The number of layers by which this image differs from the associated image basis.

        :param distance: The distance of this DockerImageDerived.
        :type distance: int
        """

        self._distance = distance

    @property
    def layer_info(self) -> List[DockerImageLayer]:
        """
        Gets the layer_info of this DockerImageDerived.
        This contains layer-specific metadata, if populated it has length \"distance\" and is ordered with [distance] being the layer immediately following the base image and [1] being the final layer.

        :return: The layer_info of this DockerImageDerived.
        :rtype: List[DockerImageLayer]
        """
        return self._layer_info

    @layer_info.setter
    def layer_info(self, layer_info: List[DockerImageLayer]):
        """
        Sets the layer_info of this DockerImageDerived.
        This contains layer-specific metadata, if populated it has length \"distance\" and is ordered with [distance] being the layer immediately following the base image and [1] being the final layer.

        :param layer_info: The layer_info of this DockerImageDerived.
        :type layer_info: List[DockerImageLayer]
        """

        self._layer_info = layer_info

    @property
    def base_resource_url(self) -> str:
        """
        Gets the base_resource_url of this DockerImageDerived.

        :return: The base_resource_url of this DockerImageDerived.
        :rtype: str
        """
        return self._base_resource_url

    @base_resource_url.setter
    def base_resource_url(self, base_resource_url: str):
        """
        Sets the base_resource_url of this DockerImageDerived.

        :param base_resource_url: The base_resource_url of this DockerImageDerived.
        :type base_resource_url: str
        """

        self._base_resource_url = base_resource_url

