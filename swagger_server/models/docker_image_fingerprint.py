# coding: utf-8

from __future__ import absolute_import
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class DockerImageFingerprint(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, v1_name: str=None, v2_blob: List[str]=None, v2_name: str=None):
        """
        DockerImageFingerprint - a model defined in Swagger

        :param v1_name: The v1_name of this DockerImageFingerprint.
        :type v1_name: str
        :param v2_blob: The v2_blob of this DockerImageFingerprint.
        :type v2_blob: List[str]
        :param v2_name: The v2_name of this DockerImageFingerprint.
        :type v2_name: str
        """
        self.swagger_types = {
            'v1_name': str,
            'v2_blob': List[str],
            'v2_name': str
        }

        self.attribute_map = {
            'v1_name': 'v1_name',
            'v2_blob': 'v2_blob',
            'v2_name': 'v2_name'
        }

        self._v1_name = v1_name
        self._v2_blob = v2_blob
        self._v2_name = v2_name

    @classmethod
    def from_dict(cls, dikt) -> 'DockerImageFingerprint':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The DockerImageFingerprint of this DockerImageFingerprint.
        :rtype: DockerImageFingerprint
        """
        return deserialize_model(dikt, cls)

    @property
    def v1_name(self) -> str:
        """
        Gets the v1_name of this DockerImageFingerprint.
        The layer-id of the final layer in the Docker image's v1 representation. This field can be used as a filter in list requests.

        :return: The v1_name of this DockerImageFingerprint.
        :rtype: str
        """
        return self._v1_name

    @v1_name.setter
    def v1_name(self, v1_name: str):
        """
        Sets the v1_name of this DockerImageFingerprint.
        The layer-id of the final layer in the Docker image's v1 representation. This field can be used as a filter in list requests.

        :param v1_name: The v1_name of this DockerImageFingerprint.
        :type v1_name: str
        """

        self._v1_name = v1_name

    @property
    def v2_blob(self) -> List[str]:
        """
        Gets the v2_blob of this DockerImageFingerprint.
        The ordered list of v2 blobs that represent a given image.

        :return: The v2_blob of this DockerImageFingerprint.
        :rtype: List[str]
        """
        return self._v2_blob

    @v2_blob.setter
    def v2_blob(self, v2_blob: List[str]):
        """
        Sets the v2_blob of this DockerImageFingerprint.
        The ordered list of v2 blobs that represent a given image.

        :param v2_blob: The v2_blob of this DockerImageFingerprint.
        :type v2_blob: List[str]
        """

        self._v2_blob = v2_blob

    @property
    def v2_name(self) -> str:
        """
        Gets the v2_name of this DockerImageFingerprint.
        Output only. The name of the image's v2 blobs computed via:   [bottom] := v2_blob[bottom]   [N] := sha256(v2_blob[N] + \" \" + v2_name[N+1]) Only the name of the final blob is kept. This field can be used as a filter in list requests.

        :return: The v2_name of this DockerImageFingerprint.
        :rtype: str
        """
        return self._v2_name

    @v2_name.setter
    def v2_name(self, v2_name: str):
        """
        Sets the v2_name of this DockerImageFingerprint.
        Output only. The name of the image's v2 blobs computed via:   [bottom] := v2_blob[bottom]   [N] := sha256(v2_blob[N] + \" \" + v2_name[N+1]) Only the name of the final blob is kept. This field can be used as a filter in list requests.

        :param v2_name: The v2_name of this DockerImageFingerprint.
        :type v2_name: str
        """

        self._v2_name = v2_name

