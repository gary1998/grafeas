# coding: utf-8

from __future__ import absolute_import
from swagger_server.models.status import Status
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class Operation(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, name: str=None, metadata: Dict[str, str]=None, done: bool=None, error: Status=None, response: Dict[str, str]=None):
        """
        Operation - a model defined in Swagger

        :param name: The name of this Operation.
        :type name: str
        :param metadata: The metadata of this Operation.
        :type metadata: Dict[str, str]
        :param done: The done of this Operation.
        :type done: bool
        :param error: The error of this Operation.
        :type error: Status
        :param response: The response of this Operation.
        :type response: Dict[str, str]
        """
        self.swagger_types = {
            'name': str,
            'metadata': Dict[str, str],
            'done': bool,
            'error': Status,
            'response': Dict[str, str]
        }

        self.attribute_map = {
            'name': 'name',
            'metadata': 'metadata',
            'done': 'done',
            'error': 'error',
            'response': 'response'
        }

        self._name = name
        self._metadata = metadata
        self._done = done
        self._error = error
        self._response = response

    @classmethod
    def from_dict(cls, dikt) -> 'Operation':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Operation of this Operation.
        :rtype: Operation
        """
        return deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """
        Gets the name of this Operation.
        The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should have the format of `operations/some/unique/name`.

        :return: The name of this Operation.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """
        Sets the name of this Operation.
        The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should have the format of `operations/some/unique/name`.

        :param name: The name of this Operation.
        :type name: str
        """

        self._name = name

    @property
    def metadata(self) -> Dict[str, str]:
        """
        Gets the metadata of this Operation.
        Service-specific metadata associated with the operation.  It typically contains progress information and common metadata such as create time. Some services might not provide such metadata.  Any method that returns a long-running operation should document the metadata type, if any.

        :return: The metadata of this Operation.
        :rtype: Dict[str, str]
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata: Dict[str, str]):
        """
        Sets the metadata of this Operation.
        Service-specific metadata associated with the operation.  It typically contains progress information and common metadata such as create time. Some services might not provide such metadata.  Any method that returns a long-running operation should document the metadata type, if any.

        :param metadata: The metadata of this Operation.
        :type metadata: Dict[str, str]
        """

        self._metadata = metadata

    @property
    def done(self) -> bool:
        """
        Gets the done of this Operation.
        If the value is `false`, it means the operation is still in progress. If true, the operation is completed, and either `error` or `response` is available.

        :return: The done of this Operation.
        :rtype: bool
        """
        return self._done

    @done.setter
    def done(self, done: bool):
        """
        Sets the done of this Operation.
        If the value is `false`, it means the operation is still in progress. If true, the operation is completed, and either `error` or `response` is available.

        :param done: The done of this Operation.
        :type done: bool
        """

        self._done = done

    @property
    def error(self) -> Status:
        """
        Gets the error of this Operation.
        The error result of the operation in case of failure or cancellation.

        :return: The error of this Operation.
        :rtype: Status
        """
        return self._error

    @error.setter
    def error(self, error: Status):
        """
        Sets the error of this Operation.
        The error result of the operation in case of failure or cancellation.

        :param error: The error of this Operation.
        :type error: Status
        """

        self._error = error

    @property
    def response(self) -> Dict[str, str]:
        """
        Gets the response of this Operation.
        The normal response of the operation in case of success.  If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`.  If the original method is standard `Get`/`Create`/`Update`, the response should be the resource.  For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name.  For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.

        :return: The response of this Operation.
        :rtype: Dict[str, str]
        """
        return self._response

    @response.setter
    def response(self, response: Dict[str, str]):
        """
        Sets the response of this Operation.
        The normal response of the operation in case of success.  If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`.  If the original method is standard `Get`/`Create`/`Update`, the response should be the resource.  For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name.  For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.

        :param response: The response of this Operation.
        :type response: Dict[str, str]
        """

        self._response = response

