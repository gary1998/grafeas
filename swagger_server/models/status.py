# coding: utf-8

from __future__ import absolute_import
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class Status(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, code: int=None, message: str=None, details: List[Dict[str, str]]=None):
        """
        Status - a model defined in Swagger

        :param code: The code of this Status.
        :type code: int
        :param message: The message of this Status.
        :type message: str
        :param details: The details of this Status.
        :type details: List[Dict[str, str]]
        """
        self.swagger_types = {
            'code': int,
            'message': str,
            'details': List[Dict[str, str]]
        }

        self.attribute_map = {
            'code': 'code',
            'message': 'message',
            'details': 'details'
        }

        self._code = code
        self._message = message
        self._details = details

    @classmethod
    def from_dict(cls, dikt) -> 'Status':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Status of this Status.
        :rtype: Status
        """
        return deserialize_model(dikt, cls)

    @property
    def code(self) -> int:
        """
        Gets the code of this Status.
        The status code, which should be an enum value of google.rpc.Code.

        :return: The code of this Status.
        :rtype: int
        """
        return self._code

    @code.setter
    def code(self, code: int):
        """
        Sets the code of this Status.
        The status code, which should be an enum value of google.rpc.Code.

        :param code: The code of this Status.
        :type code: int
        """

        self._code = code

    @property
    def message(self) -> str:
        """
        Gets the message of this Status.
        A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.

        :return: The message of this Status.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message: str):
        """
        Sets the message of this Status.
        A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.

        :param message: The message of this Status.
        :type message: str
        """

        self._message = message

    @property
    def details(self) -> List[Dict[str, str]]:
        """
        Gets the details of this Status.
        A list of messages that carry the error details.  There is a common set of message types for APIs to use.

        :return: The details of this Status.
        :rtype: List[Dict[str, str]]
        """
        return self._details

    @details.setter
    def details(self, details: List[Dict[str, str]]):
        """
        Sets the details of this Status.
        A list of messages that carry the error details.  There is a common set of message types for APIs to use.

        :param details: The details of this Status.
        :type details: List[Dict[str, str]]
        """

        self._details = details

