---
swagger: "2.0"
info:
  version: "version not set"
  title: "v1alpha1/proto/grafeas.proto"
schemes:
- "http"
- "https"
consumes:
- "application/json"
produces:
- "application/json"
paths:
  /v1alpha1/projects:
    get:
      tags:
      - "GrafeasProjects"
      summary: "Lists `Projects`"
      operationId: "list_projects"
      parameters:
      - name: "filter"
        in: "query"
        description: "The filter expression."
        required: false
        type: "string"
      - name: "page_size"
        in: "query"
        description: "Number of projects to return in the list."
        required: false
        type: "integer"
        format: "int32"
      - name: "page_token"
        in: "query"
        description: "Token to provide to skip to a particular spot in the list."
        required: false
        type: "string"
      responses:
        200:
          description: ""
          schema:
            $ref: "#/definitions/apiListProjectsResponse"
      x-swagger-router-controller: "swagger_server.controllers.grafeas_projects_controller"
    post:
      tags:
      - "GrafeasProjects"
      summary: "Creates a new `Project`."
      operationId: "create_project"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/apiProject"
      responses:
        200:
          description: ""
          schema:
            $ref: "#/definitions/Empty"
      x-swagger-router-controller: "swagger_server.controllers.grafeas_projects_controller"
  /v1alpha1/projects/{projectId}:
    get:
      tags:
      - "GrafeasProjects"
      summary: "Returns the requested `Project`."
      operationId: "get_project"
      parameters:
      - name: "projectId"
        in: "path"
        description: "Part of `parent`. This field contains the projectId for example:\n\
          \"projects/{projectId}"
        required: true
        type: "string"
      responses:
        200:
          description: ""
          schema:
            $ref: "#/definitions/apiProject"
      x-swagger-router-controller: "swagger_server.controllers.grafeas_projects_controller"
    delete:
      tags:
      - "GrafeasProjects"
      summary: "Deletes the given `Project` from the system."
      operationId: "delete_project"
      parameters:
      - name: "projectId"
        in: "path"
        description: "Part of `parent`. This field contains the projectId for example:\n\
          \"projects/{projectId}"
        required: true
        type: "string"
      responses:
        200:
          description: ""
          schema:
            $ref: "#/definitions/Empty"
      x-swagger-router-controller: "swagger_server.controllers.grafeas_projects_controller"
    patch:
      tags:
      - "GrafeasProjects"
      summary: "Updates an existing `Project`."
      operationId: "update_project"
      parameters:
      - name: "projectId"
        in: "path"
        description: "Part of `parent`. This field contains the projectId for example:\n\
          \"projects/{projectId}"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/apiProject"
      responses:
        200:
          description: ""
          schema:
            $ref: "#/definitions/apiProject"
      x-swagger-router-controller: "swagger_server.controllers.grafeas_projects_controller"
  /v1alpha1/projects/{projectId}/notes:
    get:
      tags:
      - "GrafeasNotes"
      summary: "Lists all `Notes` for a given project."
      operationId: "list_notes"
      parameters:
      - name: "projectId"
        in: "path"
        description: "Part of `parent`. This field contains the projectId for example:\n\
          \"projects/{projectId}"
        required: true
        type: "string"
      - name: "filter"
        in: "query"
        description: "The filter expression."
        required: false
        type: "string"
      - name: "page_size"
        in: "query"
        description: "Number of notes to return in the list."
        required: false
        type: "integer"
        format: "int32"
      - name: "page_token"
        in: "query"
        description: "Token to provide to skip to a particular spot in the list."
        required: false
        type: "string"
      responses:
        200:
          description: ""
          schema:
            $ref: "#/definitions/apiListNotesResponse"
      x-swagger-router-controller: "swagger_server.controllers.grafeas_notes_controller"
    post:
      tags:
      - "GrafeasNotes"
      summary: "Creates a new `Note`."
      operationId: "create_note"
      parameters:
      - name: "projectId"
        in: "path"
        description: "Part of `parent`. This field contains the projectId for example:\n\
          \"projects/{projectId}"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/apiNote"
      responses:
        200:
          description: ""
          schema:
            $ref: "#/definitions/apiNote"
      x-swagger-router-controller: "swagger_server.controllers.grafeas_notes_controller"
  /v1alpha1/projects/{projectId}/occurrences/{occurrenceId}/notes:
    get:
      tags:
      - "GrafeasNotes"
      summary: "Gets the `Note` attached to the given `Occurrence`."
      operationId: "get_occurrence_note"
      parameters:
      - name: "projectId"
        in: "path"
        description: "Part of `name`. The name of the occurrence in the form\n\"projects/{projectId}/occurrences/{occurrenceId}\""
        required: true
        type: "string"
      - name: "occurrenceId"
        in: "path"
        description: "Part of `name`. See documentation of `projectId`."
        required: true
        type: "string"
      responses:
        200:
          description: ""
          schema:
            $ref: "#/definitions/apiNote"
      x-swagger-router-controller: "swagger_server.controllers.grafeas_notes_controller"
  /v1alpha1/projects/{projectId}/occurrences:
    get:
      tags:
      - "GrafeasOccurrences"
      summary: "Lists active `Occurrences` for a given project matching the filters."
      operationId: "list_occurrences"
      parameters:
      - name: "projectId"
        in: "path"
        description: "Part of `parent`. This contains the projectId for example: projects/{projectId}"
        required: true
        type: "string"
      - name: "filter"
        in: "query"
        description: "The filter expression."
        required: false
        type: "string"
      - name: "page_size"
        in: "query"
        description: "Number of occurrences to return in the list."
        required: false
        type: "integer"
        format: "int32"
      - name: "page_token"
        in: "query"
        description: "Token to provide to skip to a particular spot in the list."
        required: false
        type: "string"
      responses:
        200:
          description: ""
          schema:
            $ref: "#/definitions/apiListOccurrencesResponse"
      x-swagger-router-controller: "swagger_server.controllers.grafeas_occurrences_controller"
    post:
      tags:
      - "GrafeasOccurrences"
      summary: "Creates a new `Occurrence`. Use this method to create `Occurrences`\n\
        for a resource."
      operationId: "create_occurrence"
      parameters:
      - name: "projectId"
        in: "path"
        description: "Part of `parent`. This contains the projectId for example: projects/{projectId}"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/apiOccurrence"
      responses:
        200:
          description: ""
          schema:
            $ref: "#/definitions/apiOccurrence"
      x-swagger-router-controller: "swagger_server.controllers.grafeas_occurrences_controller"
  /v1alpha1/projects/{projectId}/notes/{noteId}/occurrences:
    get:
      tags:
      - "GrafeasOccurrences"
      summary: "Lists `Occurrences` referencing the specified `Note`. Use this method\
        \ to\nget all occurrences referencing your `Note` across all your customer\n\
        projects."
      operationId: "list_note_occurrences"
      parameters:
      - name: "projectId"
        in: "path"
        description: "Part of `name`. The name field will contain the note name for\
          \ example:\n  \"projects/{projectId}/notes/{noteId}\""
        required: true
        type: "string"
      - name: "noteId"
        in: "path"
        description: "Part of `name`. See documentation of `projectId`."
        required: true
        type: "string"
      - name: "filter"
        in: "query"
        description: "The filter expression."
        required: false
        type: "string"
      - name: "page_size"
        in: "query"
        description: "Number of notes to return in the list."
        required: false
        type: "integer"
        format: "int32"
      - name: "page_token"
        in: "query"
        description: "Token to provide to skip to a particular spot in the list."
        required: false
        type: "string"
      responses:
        200:
          description: ""
          schema:
            $ref: "#/definitions/apiListNoteOccurrencesResponse"
      x-swagger-router-controller: "swagger_server.controllers.grafeas_occurrences_controller"
definitions:
  BuildSignatureKeyType:
    type: "string"
    title: "Public key formats"
    description: "- KEY_TYPE_UNSPECIFIED: `KeyType` is not set.\n - PGP_ASCII_ARMORED:\
      \ `PGP ASCII Armored` public key.\n - PKIX_PEM: `PKIX PEM` public key."
    enum:
    - "KEY_TYPE_UNSPECIFIED"
    - "PGP_ASCII_ARMORED"
    - "PKIX_PEM"
    default: "KEY_TYPE_UNSPECIFIED"
  DeployableDeployment:
    type: "object"
    properties:
      user_email:
        type: "string"
        description: "Identity of the user that triggered this deployment."
      deploy_time:
        type: "string"
        format: "date-time"
        description: "Beginning of the lifetime of this deployment."
      undeploy_time:
        type: "string"
        format: "date-time"
        description: "End of the lifetime of this deployment."
      config:
        type: "string"
        description: "Configuration used to create this deployment."
      address:
        type: "string"
        description: "Address of the runtime element hosting this deployment."
      resource_uri:
        type: "array"
        description: "Output only. Resource URI for the artifact being deployed taken\
          \ from the\ndeployable field with the same name."
        items:
          type: "string"
      platform:
        description: "Platform hosting this deployment."
        $ref: "#/definitions/DeploymentPlatform"
    description: "The period during which some deployable was active in a runtime."
  DeploymentPlatform:
    type: "string"
    description: "Types of platforms.\n\n - PLATFORM_UNSPECIFIED: Unknown\n - GKE:\
      \ Google Container Engine\n - FLEX: Google App Engine: Flexible Environment\n\
      \ - CUSTOM: Custom user-defined platform"
    enum:
    - "PLATFORM_UNSPECIFIED"
    - "GKE"
    - "FLEX"
    - "CUSTOM"
    default: "PLATFORM_UNSPECIFIED"
  DiscoveryDiscovered:
    type: "object"
    properties:
      operation:
        description: "Output only. An operation that indicates the status of the current\
          \ scan."
        $ref: "#/definitions/Operation"
    description: "Provides information about the scan status of a discovered resource."
  DockerImageBasis:
    type: "object"
    properties:
      resource_url:
        type: "string"
        description: "The resource_url for the resource representing the basis of\n\
          associated occurrence images."
      fingerprint:
        title: "The fingerprint of the base image"
        $ref: "#/definitions/DockerImageFingerprint"
    description: "Basis describes the base image portion (Note) of the DockerImage\n\
      relationship.  Linked occurrences are derived from this or an\nequivalent image\
      \ via:\n  FROM <Basis.resource_url>\nOr an equivalent reference, e.g. a tag\
      \ of the resource_url."
  DockerImageDerived:
    type: "object"
    properties:
      fingerprint:
        title: "The fingerprint of the derived image"
        $ref: "#/definitions/DockerImageFingerprint"
      distance:
        type: "integer"
        format: "int64"
        description: "Output only. The number of layers by which this image differs\
          \ from\nthe associated image basis."
      layer_info:
        type: "array"
        description: "This contains layer-specific metadata, if populated it\nhas\
          \ length \"distance\" and is ordered with [distance] being the\nlayer immediately\
          \ following the base image and [1]\nbeing the final layer."
        items:
          $ref: "#/definitions/DockerImageLayer"
      base_resource_url:
        type: "string"
        title: "Output only.This contains the base image url for the derived image\n\
          Occurrence"
    description: "Derived describes the derived image portion (Occurrence) of the\n\
      DockerImage relationship.  This image would be produced from a Dockerfile\n\
      with FROM <DockerImage.Basis in attached Note>."
  DockerImageFingerprint:
    type: "object"
    properties:
      v1_name:
        type: "string"
        description: "The layer-id of the final layer in the Docker image's v1\nrepresentation.\n\
          This field can be used as a filter in list requests."
      v2_blob:
        type: "array"
        description: "The ordered list of v2 blobs that represent a given image."
        items:
          type: "string"
      v2_name:
        type: "string"
        description: "Output only. The name of the image's v2 blobs computed via:\n\
          \  [bottom] := v2_blob[bottom]\n  [N] := sha256(v2_blob[N] + \" \" + v2_name[N+1])\n\
          Only the name of the final blob is kept.\nThis field can be used as a filter\
          \ in list requests."
    description: "A set of properties that uniquely identify a given Docker image."
  DockerImageLayer:
    type: "object"
    properties:
      directive:
        description: "The recovered Dockerfile directive used to construct this layer."
        $ref: "#/definitions/LayerDirective"
      arguments:
        type: "string"
        description: "The recovered arguments to the Dockerfile directive."
    description: "Layer holds metadata specific to a layer of a Docker image."
  HashHashType:
    type: "string"
    description: "Specifies the hash algorithm, if any.\n\n - NONE: No hash requested.\n\
      \ - SHA256: A sha256 hash."
    enum:
    - "NONE"
    - "SHA256"
    default: "NONE"
  LayerDirective:
    type: "string"
    title: "Instructions from dockerfile"
    description: "- DIRECTIVE_UNSPECIFIED: Default value for unsupported/missing directive\n\
      \ - MAINTAINER: https://docs.docker.com/reference/builder/#maintainer\n - RUN:\
      \ https://docs.docker.com/reference/builder/#run\n - CMD: https://docs.docker.com/reference/builder/#cmd\n\
      \ - LABEL: https://docs.docker.com/reference/builder/#label\n - EXPOSE: https://docs.docker.com/reference/builder/#expose\n\
      \ - ENV: https://docs.docker.com/reference/builder/#env\n - ADD: https://docs.docker.com/reference/builder/#add\n\
      \ - COPY: https://docs.docker.com/reference/builder/#copy\n - ENTRYPOINT: https://docs.docker.com/reference/builder/#entrypoint\n\
      \ - VOLUME: https://docs.docker.com/reference/builder/#volume\n - USER: https://docs.docker.com/reference/builder/#user\n\
      \ - WORKDIR: https://docs.docker.com/reference/builder/#workdir\n - ARG: https://docs.docker.com/reference/builder/#arg\n\
      \ - ONBUILD: https://docs.docker.com/reference/builder/#onbuild\n - STOPSIGNAL:\
      \ https://docs.docker.com/reference/builder/#stopsignal\n - HEALTHCHECK: https://docs.docker.com/reference/builder/#healthcheck\n\
      \ - SHELL: https://docs.docker.com/reference/builder/#shell"
    enum:
    - "DIRECTIVE_UNSPECIFIED"
    - "MAINTAINER"
    - "RUN"
    - "CMD"
    - "LABEL"
    - "EXPOSE"
    - "ENV"
    - "ADD"
    - "COPY"
    - "ENTRYPOINT"
    - "VOLUME"
    - "USER"
    - "WORKDIR"
    - "ARG"
    - "ONBUILD"
    - "STOPSIGNAL"
    - "HEALTHCHECK"
    - "SHELL"
    default: "DIRECTIVE_UNSPECIFIED"
  NoteRelatedUrl:
    type: "object"
    properties:
      url:
        type: "string"
        title: "Specific URL to associate with the note"
      label:
        type: "string"
        title: "Label to describe usage of the URL"
    title: "Metadata for any related URL information"
  PackageManagerArchitecture:
    type: "string"
    description: "Instruction set architectures supported by various package managers.\n\
      \n - ARCHITECTURE_UNSPECIFIED: Unknown architecture\n - X86: X86 architecture\n\
      \ - X64: X64 architecture"
    enum:
    - "ARCHITECTURE_UNSPECIFIED"
    - "X86"
    - "X64"
    default: "ARCHITECTURE_UNSPECIFIED"
  PackageManagerDistribution:
    type: "object"
    properties:
      cpe_uri:
        type: "string"
        description: "The cpe_uri in [cpe format](https://cpe.mitre.org/specification/)\n\
          denoting the package manager version distributing a package."
      architecture:
        title: "The CPU architecture for which packages in this distribution\nchannel\
          \ were built"
        $ref: "#/definitions/PackageManagerArchitecture"
      latest_version:
        description: "The latest available version of this package in\nthis distribution\
          \ channel."
        $ref: "#/definitions/VulnerabilityTypeVersion"
      maintainer:
        type: "string"
        description: "A freeform string denoting the maintainer of this package."
      url:
        type: "string"
        description: "The distribution channel-specific homepage for this package."
      description:
        type: "string"
        description: "The distribution channel-specific description of this package."
    title: "This represents a particular channel of distribution for a given package.\n\
      e.g. Debian's jessie-backports dpkg mirror"
  PackageManagerInstallation:
    type: "object"
    properties:
      name:
        type: "string"
        description: "Output only. The name of the installed package."
      location:
        type: "array"
        description: "All of the places within the filesystem versions of this package\n\
          have been found."
        items:
          $ref: "#/definitions/apiPackageManagerLocation"
    description: "This represents how a particular software package may be installed\
      \ on\na system."
  PackageManagerPackage:
    type: "object"
    properties:
      name:
        type: "string"
        description: "The name of the package."
      distribution:
        type: "array"
        description: "The various channels by which a package is distributed."
        items:
          $ref: "#/definitions/PackageManagerDistribution"
    description: "This represents a particular package that is distributed over\n\
      various channels.\ne.g. glibc (aka libc6) is distributed by many, at various\
      \ versions."
  VersionVersionKind:
    type: "string"
    description: "Whether this is an ordinary package version or a\nsentinel MIN/MAX\
      \ version.\n\n - NORMAL: A standard package version, defined by the other fields.\n\
      \ - MINIMUM: A special version representing negative infinity,\nother fields\
      \ are ignored.\n - MAXIMUM: A special version representing positive infinity,\n\
      other fields are ignored."
    enum:
    - "NORMAL"
    - "MINIMUM"
    - "MAXIMUM"
    default: "NORMAL"
  VulnerabilityTypeDetail:
    type: "object"
    properties:
      cpe_uri:
        type: "string"
        description: "The cpe_uri in [cpe format] (https://cpe.mitre.org/specification/)\
          \ in\nwhich the vulnerability manifests.  Examples include distro or storage\n\
          location for vulnerable jar.\nThis field can be used as a filter in list\
          \ requests."
      package:
        type: "string"
        description: "The name of the package where the vulnerability was found.\n\
          This field can be used as a filter in list requests."
      min_affected_version:
        description: "The min version of the package in which the vulnerability exists."
        $ref: "#/definitions/VulnerabilityTypeVersion"
      max_affected_version:
        description: "The max version of the package in which the vulnerability exists.\n\
          This field can be used as a filter in list requests."
        $ref: "#/definitions/VulnerabilityTypeVersion"
      severity_name:
        type: "string"
        description: "The severity (eg: distro assigned severity) for this vulnerability."
      description:
        type: "string"
        description: "A vendor-specific description of this note."
      fixed_location:
        description: "The fix for this specific package version."
        $ref: "#/definitions/VulnerabilityTypeVulnerabilityLocation"
      package_type:
        type: "string"
        title: "The type of package; whether native or non native(ruby gems,\nnode.js\
          \ packages etc)"
    title: "Identifies all occurrences of this vulnerability in the package for a\n\
      specific distro/location\nFor example: glibc in cpe:/o:debian:debian_linux:8\
      \ for versions 2.1 - 2.2"
  VulnerabilityTypePackageIssue:
    type: "object"
    properties:
      affected_location:
        description: "The location of the vulnerability."
        $ref: "#/definitions/VulnerabilityTypeVulnerabilityLocation"
      fixed_location:
        description: "The location of the available fix for vulnerability."
        $ref: "#/definitions/VulnerabilityTypeVulnerabilityLocation"
      severity_name:
        type: "string"
        description: "The severity (eg: distro assigned severity) for this vulnerability."
    description: "This message wraps a location affected by a vulnerability and its\n\
      associated fix (if one is available)."
  VulnerabilityTypeSeverity:
    type: "string"
    title: "Note provider-assigned severity/impact ranking"
    description: "- SEVERITY_UNSPECIFIED: Unknown Impact\n - MINIMAL: Minimal Impact\n\
      \ - LOW: Low Impact\n - MEDIUM: Medium Impact\n - HIGH: High Impact\n - CRITICAL:\
      \ Critical Impact"
    enum:
    - "SEVERITY_UNSPECIFIED"
    - "MINIMAL"
    - "LOW"
    - "MEDIUM"
    - "HIGH"
    - "CRITICAL"
    default: "SEVERITY_UNSPECIFIED"
  VulnerabilityTypeVersion:
    type: "object"
    properties:
      epoch:
        type: "integer"
        format: "int32"
        description: "Used to correct mistakes in the version numbering scheme."
      name:
        type: "string"
        description: "The main part of the version name."
      revision:
        type: "string"
        description: "The iteration of the package build from the above version."
      kind:
        description: "Distinguish between sentinel MIN/MAX versions and normal versions.\n\
          If kind is not NORMAL, then the other fields are ignored."
        $ref: "#/definitions/VersionVersionKind"
    title: "Version contains structured information about the version of the package.\n\
      For a discussion of this in Debian/Ubuntu:\nhttp://serverfault.com/questions/604541/debian-packages-version-convention\n\
      For a discussion of this in Redhat/Fedora/Centos:\nhttp://blog.jasonantman.com/2014/07/how-yum-and-rpm-compare-versions/"
  VulnerabilityTypeVulnerabilityDetails:
    type: "object"
    properties:
      type:
        type: "string"
        title: "The type of package; whether native or non native(ruby gems,\nnode.js\
          \ packages etc)"
      severity:
        description: "Output only. The note provider assigned Severity of the vulnerability."
        $ref: "#/definitions/VulnerabilityTypeSeverity"
      cvss_score:
        type: "number"
        format: "float"
        description: "Output only. The CVSS score of this vulnerability. CVSS score\
          \ is on a\nscale of 0-10 where 0 indicates low severity and 10 indicates\
          \ high\nseverity."
      package_issue:
        type: "array"
        description: "The set of affected locations and their fixes (if available)\
          \ within\nthe associated resource."
        items:
          $ref: "#/definitions/VulnerabilityTypePackageIssue"
    description: "Used by Occurrence to point to where the vulnerability exists and\
      \ how\nto fix it."
  VulnerabilityTypeVulnerabilityLocation:
    type: "object"
    properties:
      cpe_uri:
        type: "string"
        description: "The cpe_uri in [cpe format] (https://cpe.mitre.org/specification/)\n\
          format. Examples include distro or storage location for vulnerable jar.\n\
          This field can be used as a filter in list requests."
      package:
        type: "string"
        description: "The package being described."
      version:
        description: "The version of the package being described.\nThis field can\
          \ be used as a filter in list requests."
        $ref: "#/definitions/VulnerabilityTypeVersion"
    title: "The location of the vulnerability"
  apiAliasContext:
    type: "object"
    properties:
      kind:
        description: "The alias kind."
        $ref: "#/definitions/apiAliasContextKind"
      name:
        type: "string"
        description: "The alias name."
    description: "An alias to a repo revision."
  apiAliasContextKind:
    type: "string"
    description: "The type of an alias.\n\n - KIND_UNSPECIFIED: Unknown.\n - FIXED:\
      \ Git tag.\n - MOVABLE: Git branch.\n - OTHER: Used to specify non-standard\
      \ aliases. For example, if a Git repo has a\nref named \"refs/foo/bar\"."
    enum:
    - "KIND_UNSPECIFIED"
    - "FIXED"
    - "MOVABLE"
    - "OTHER"
    default: "KIND_UNSPECIFIED"
  apiArtifact:
    type: "object"
    properties:
      name:
        type: "string"
        description: "Name of the artifact. This may be the path to a binary or jar\
          \ file, or in\nthe case of a container build, the name used to push the\
          \ container image to\nGoogle Container Registry, as presented to `docker\
          \ push`.\n\nThis field is deprecated in favor of the plural `names` field;\
          \ it continues\nto exist here to allow existing BuildProvenance serialized\
          \ to json in\ngoogle.devtools.containeranalysis.v1alpha1.BuildDetails.provenance_bytes\
          \ to\ndeserialize back into proto."
      checksum:
        type: "string"
        description: "Hash or checksum value of a binary, or Docker Registry 2.0 digest\
          \ of a\ncontainer."
      id:
        type: "string"
        title: "Artifact ID, if any; for container images, this will be a URL by digest\n\
          like gcr.io/projectID/imagename@sha256:123456"
      names:
        type: "array"
        description: "Related artifact names. This may be the path to a binary or\
          \ jar file, or in\nthe case of a container build, the name used to push\
          \ the container image to\nGoogle Container Registry, as presented to `docker\
          \ push`. Note that a\nsingle Artifact ID can have multiple names, for example\
          \ if two tags are\napplied to one image."
        items:
          type: "string"
    description: "Artifact describes a build product."
  apiBuildDetails:
    type: "object"
    properties:
      provenance:
        title: "The actual provenance"
        $ref: "#/definitions/apiBuildProvenance"
      provenance_bytes:
        type: "string"
        description: "Serialized JSON representation of the provenance, used in generating\
          \ the\n`BuildSignature` in the corresponding Result. After verifying the\n\
          signature, `provenance_bytes` can be unmarshalled and compared to the\n\
          provenance to confirm that it is unchanged. A base64-encoded string\nrepresentation\
          \ of the provenance bytes is used for the signature in order\nto interoperate\
          \ with openssl which expects this format for signature\nverification.\n\n\
          The serialized form is captured both to avoid ambiguity in how the\nprovenance\
          \ is marshalled to json as well to prevent incompatibilities with\nfuture\
          \ changes."
    description: "Message encapsulating build provenance details."
  apiBuildProvenance:
    type: "object"
    properties:
      id:
        type: "string"
        description: "Unique identifier of the build."
      projectId:
        type: "string"
        description: "ID of the project."
      commands:
        type: "array"
        description: "Commands requested by the build."
        items:
          $ref: "#/definitions/apiCommand"
      built_artifacts:
        type: "array"
        description: "Output of the build."
        items:
          $ref: "#/definitions/apiArtifact"
      create_time:
        type: "string"
        format: "date-time"
        description: "Time at which the build was created."
      start_time:
        type: "string"
        format: "date-time"
        description: "Time at which execution of the build was started."
      finish_time:
        type: "string"
        format: "date-time"
        description: "Time at which execution of the build was finished."
      creator:
        type: "string"
        description: "E-mail address of the user who initiated this build. Note that\
          \ this was the\nuser's e-mail address at the time the build was initiated;\
          \ this address may\nnot represent the same end-user for all time."
      logs_bucket:
        type: "string"
        description: "Google Cloud Storage bucket where logs were written."
      source_provenance:
        description: "Details of the Source input to the build."
        $ref: "#/definitions/apiSource"
      trigger_id:
        type: "string"
        description: "Trigger identifier if the build was triggered automatically;\
          \ empty if not."
      build_options:
        type: "object"
        description: "Special options applied to this build. This is a catch-all field\
          \ where\nbuild providers can enter any desired additional details."
        additionalProperties:
          type: "string"
      builder_version:
        type: "string"
        description: "Version string of the builder at the time this build was executed."
    description: "Provenance of a build. Contains all information needed to verify\
      \ the full\ndetails about the build from source to completion."
  apiBuildSignature:
    type: "object"
    properties:
      public_key:
        type: "string"
        description: "Public key of the builder which can be used to verify that the\
          \ related\nfindings are valid and unchanged. If `key_type` is empty, this\
          \ defaults\nto PEM encoded public keys.\n\nThis field may be empty if `key_id`\
          \ references an external key.\n\nFor Cloud Container Builder based signatures,\
          \ this is a PEM encoded public\nkey. To verify the Cloud Container Builder\
          \ signature, place the contents of\nthis field into a file (public.pem).\
          \ The signature field is base64-decoded\ninto its binary representation\
          \ in signature.bin, and the provenance bytes\nfrom `BuildDetails` are base64-decoded\
          \ into a binary representation in\nsigned.bin. OpenSSL can then verify the\
          \ signature:\n`openssl sha256 -verify public.pem -signature signature.bin\
          \ signed.bin`"
      signature:
        type: "string"
        description: "Signature of the related `BuildProvenance`, encoded in a base64\
          \ string."
      key_id:
        type: "string"
        description: "An Id for the key used to sign. This could be either an Id for\
          \ the key\nstored in `public_key` (such as the Id or fingerprint for a PGP\
          \ key, or the\nCN for a cert), or a reference to an external key (such as\
          \ a reference to a\nkey in Cloud Key Management Service)."
      key_type:
        title: "The type of the key, either stored in `public_key` or referenced in\n\
          `key_id`"
        $ref: "#/definitions/BuildSignatureKeyType"
    description: "Message encapsulating the signature of the verified build."
  apiBuildType:
    type: "object"
    properties:
      builder_version:
        type: "string"
        description: "Version of the builder which produced this Note."
      signature:
        description: "Signature of the build in Occurrences pointing to the Note containing\
          \ this\n`BuilderDetails`."
        $ref: "#/definitions/apiBuildSignature"
    description: "Note holding the version of the provider's builder and the signature\
      \ of\nthe provenance message in linked BuildDetails."
  apiCloudRepoSourceContext:
    type: "object"
    properties:
      repo_id:
        description: "The ID of the repo."
        $ref: "#/definitions/apiRepoId"
      revision_id:
        type: "string"
        description: "A revision ID."
      alias_context:
        description: "An alias, which may be a branch or tag."
        $ref: "#/definitions/apiAliasContext"
    description: "A CloudRepoSourceContext denotes a particular revision in a Google\
      \ Cloud\nSource Repo."
  apiCommand:
    type: "object"
    properties:
      name:
        type: "string"
        description: "Name of the command, as presented on the command line, or if\
          \ the command is\npackaged as a Docker container, as presented to `docker\
          \ pull`."
      env:
        type: "array"
        description: "Environment variables set before running this Command."
        items:
          type: "string"
      args:
        type: "array"
        description: "Command-line arguments used when executing this Command."
        items:
          type: "string"
      dir:
        type: "string"
        description: "Working directory (relative to project source root) used when\
          \ running\nthis Command."
      id:
        type: "string"
        description: "Optional unique identifier for this Command, used in wait_for\
          \ to reference\nthis Command as a dependency."
      wait_for:
        type: "array"
        description: "The ID(s) of the Command(s) that this Command depends on."
        items:
          type: "string"
    description: "Command describes a step performed as part of the build pipeline."
  apiCreateOperationRequest:
    type: "object"
    properties:
      parent:
        type: "string"
        description: "The projectId that this operation should be created under."
      operation_id:
        type: "string"
        description: "The ID to use for this operation."
      operation:
        description: "The operation to create."
        $ref: "#/definitions/Operation"
    title: "Request for creating an operation"
  apiDeployable:
    type: "object"
    properties:
      resource_uri:
        type: "array"
        description: "Resource URI for the artifact being deployed."
        items:
          type: "string"
    description: "An artifact that can be deployed in some runtime."
  apiDiscovery:
    type: "object"
    properties:
      analysis_kind:
        description: "The kind of analysis that is handled by this discovery."
        $ref: "#/definitions/apiNoteKind"
    description: "A note that indicates a type of analysis a provider would perform.\
      \ This note\nexists in a provider's project. A `Discovery` occurrence is created\
      \ in a\nconsumer's project at the start of analysis. The occurrence's operation\
      \ will\nindicate the status of the analysis. Absence of an occurrence linked\
      \ to this\nnote for a resource indicates that analysis hasn't started."
  apiFileHashes:
    type: "object"
    properties:
      file_hash:
        type: "array"
        description: "Collection of file hashes."
        items:
          $ref: "#/definitions/apiHash"
    description: "Container message for hashes of byte content of files, used in Source\n\
      messages to verify integrity of source input to the build."
  apiGerritSourceContext:
    type: "object"
    properties:
      host_uri:
        type: "string"
        description: "The URI of a running Gerrit instance."
      gerrit_project:
        type: "string"
        description: "The full project name within the host. Projects may be nested,\
          \ so\n\"project/subproject\" is a valid project name. The \"repo name\"\
          \ is\nthe hostURI/project."
      revision_id:
        type: "string"
        description: "A revision (commit) ID."
      alias_context:
        description: "An alias, which may be a branch or tag."
        $ref: "#/definitions/apiAliasContext"
    description: "A SourceContext referring to a Gerrit project."
  apiGitSourceContext:
    type: "object"
    properties:
      url:
        type: "string"
        description: "Git repository URL."
      revision_id:
        type: "string"
        description: "Required.\nGit commit hash."
    description: "A GitSourceContext denotes a particular revision in a third party\
      \ Git\nrepository (e.g., GitHub)."
  apiHash:
    type: "object"
    properties:
      type:
        description: "The type of hash that was performed."
        $ref: "#/definitions/HashHashType"
      value:
        type: "string"
        format: "byte"
        description: "The hash value."
        pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
        x-regex: "^(?:[A-Za-z0-9+\\/]{4})*(?:[A-Za-z0-9+\\/]{2}==|[A-Za-z0-9+\\/]{3}=)?$"
        x-modifiers: []
    description: "Container message for hash values."
  apiListNoteOccurrencesResponse:
    type: "object"
    properties:
      occurrences:
        type: "array"
        description: "The occurrences attached to the specified note."
        items:
          $ref: "#/definitions/apiOccurrence"
      next_page_token:
        type: "string"
        description: "Token to receive the next page of notes."
    description: "Response including listed occurrences for a note."
  apiListNotesResponse:
    type: "object"
    properties:
      notes:
        type: "array"
        title: "The occurrences requested"
        items:
          $ref: "#/definitions/apiNote"
      next_page_token:
        type: "string"
        description: "The next pagination token in the list response. It should be\
          \ used as\npage_token for the following request. An empty value means no\
          \ more result."
    description: "Response including listed notes."
  apiListOccurrencesResponse:
    type: "object"
    properties:
      occurrences:
        type: "array"
        description: "The occurrences requested."
        items:
          $ref: "#/definitions/apiOccurrence"
      next_page_token:
        type: "string"
        description: "The next pagination token in the list response. It should be\
          \ used as\n`page_token` for the following request. An empty value means\
          \ no more\nresults."
    description: "Response including listed active occurrences."
  apiListProjectsResponse:
    type: "object"
    properties:
      projects:
        type: "array"
        description: "The projects requested."
        items:
          $ref: "#/definitions/apiProject"
      next_page_token:
        type: "string"
        description: "The next pagination token in the list response. It should be\
          \ used as\n`page_token` for the following request. An empty value means\
          \ no more\nresults."
    title: "Response including listed projects"
  apiNote:
    type: "object"
    properties:
      name:
        type: "string"
        title: "The name of the note in the form\n\"projects/{projectId}/notes/{NOTE_ID}\""
      short_description:
        type: "string"
        description: "A one sentence description of this `Note`."
      long_description:
        type: "string"
        description: "A detailed description of this `Note`."
      kind:
        description: "Output only. This explicitly denotes which kind of note is specified.\
          \ This\nfield can be used as a filter in list requests."
        $ref: "#/definitions/apiNoteKind"
      vulnerability_type:
        description: "A package vulnerability type of note."
        $ref: "#/definitions/apiVulnerabilityType"
      build_type:
        description: "Build provenance type for a verifiable build."
        $ref: "#/definitions/apiBuildType"
      base_image:
        description: "A note describing a base image."
        $ref: "#/definitions/DockerImageBasis"
      package:
        description: "A note describing a package hosted by various package managers."
        $ref: "#/definitions/PackageManagerPackage"
      deployable:
        description: "A note describing something that can be deployed."
        $ref: "#/definitions/apiDeployable"
      discovery:
        description: "A note describing a provider/analysis type."
        $ref: "#/definitions/apiDiscovery"
      related_url:
        type: "array"
        title: "URLs associated with this note"
        items:
          $ref: "#/definitions/NoteRelatedUrl"
      expiration_time:
        type: "string"
        format: "date-time"
        description: "Time of expiration for this note, null if note does not expire."
      create_time:
        type: "string"
        format: "date-time"
        description: "Output only. The time this note was created. This field can\
          \ be used as a\nfilter in list requests."
      update_time:
        type: "string"
        format: "date-time"
        description: "Output only. The time this note was last updated. This field\
          \ can be used as\na filter in list requests."
    description: "Provides a detailed description of a `Note`."
  apiNoteKind:
    type: "string"
    description: "This must be 1:1 with members of our oneofs, it can be used for\
      \ filtering\nNote and Occurrence on their kind.\n\n - KIND_UNSPECIFIED: Unknown\n\
      \ - PACKAGE_VULNERABILITY: The note and occurrence represent a package vulnerability.\n\
      \ - BUILD_DETAILS: The note and occurrence assert build provenance.\n - IMAGE_BASIS:\
      \ This represents an image basis relationship.\n - PACKAGE_MANAGER: This represents\
      \ a package installed via a package manager.\n - DEPLOYABLE: The note and occurrence\
      \ track deployment events.\n - DISCOVERY: The note and occurrence track the\
      \ initial discovery status of a resource."
    enum:
    - "KIND_UNSPECIFIED"
    - "PACKAGE_VULNERABILITY"
    - "BUILD_DETAILS"
    - "IMAGE_BASIS"
    - "PACKAGE_MANAGER"
    - "DEPLOYABLE"
    - "DISCOVERY"
    default: "KIND_UNSPECIFIED"
  apiOccurrence:
    type: "object"
    properties:
      name:
        type: "string"
        title: "Output only. The name of the `Occurrence` in the form\n\"projects/{projectId}/occurrences/{OCCURRENCE_ID}\""
      resource_url:
        type: "string"
        description: "The unique URL of the image or the container for which the `Occurrence`\n\
          applies. For example, https://gcr.io/project/image@sha256:foo This field\n\
          can be used as a filter in list requests."
      note_name:
        type: "string"
        description: "An analysis note associated with this image, in the form\n\"\
          projects/{projectId}/notes/{NOTE_ID}\"\nThis field can be used as a filter\
          \ in list requests."
      kind:
        description: "Output only. This explicitly denotes which of the `Occurrence`\
          \ details are\nspecified. This field can be used as a filter in list requests."
        $ref: "#/definitions/apiNoteKind"
      vulnerability_details:
        description: "Details of a security vulnerability note."
        $ref: "#/definitions/VulnerabilityTypeVulnerabilityDetails"
      build_details:
        description: "Build details for a verifiable build."
        $ref: "#/definitions/apiBuildDetails"
      derived_image:
        description: "Describes how this resource derives from the basis\nin the associated\
          \ note."
        $ref: "#/definitions/DockerImageDerived"
      installation:
        description: "Describes the installation of a package on the linked resource."
        $ref: "#/definitions/PackageManagerInstallation"
      deployment:
        description: "Describes the deployment of an artifact on a runtime."
        $ref: "#/definitions/DeployableDeployment"
      discovered:
        description: "Describes the initial scan status for this resource."
        $ref: "#/definitions/DiscoveryDiscovered"
      remediation:
        type: "string"
        title: "A description of actions that can be taken to remedy the `Note`"
      create_time:
        type: "string"
        format: "date-time"
        description: "Output only. The time this `Occurrence` was created."
      update_time:
        type: "string"
        format: "date-time"
        description: "Output only. The time this `Occurrence` was last updated."
    description: "`Occurrence` includes information about analysis occurrences for\
      \ an image."
  apiPackageManagerLocation:
    type: "object"
    properties:
      cpe_uri:
        type: "string"
        description: "The cpe_uri in [cpe format](https://cpe.mitre.org/specification/)\n\
          denoting the package manager version distributing a package."
      version:
        description: "The version installed at this location."
        $ref: "#/definitions/VulnerabilityTypeVersion"
      path:
        type: "string"
        description: "The path from which we gathered that this package/version is\
          \ installed."
    title: "An occurrence of a particular package installation found within a\nsystem's\
      \ filesystem.\ne.g. glibc was found in /var/lib/dpkg/status"
  apiProject:
    type: "object"
    properties:
      name:
        type: "string"
        title: "The name of the project of the form\n\"projects/{projectId}\""
    description: "Provides detailed description of a `Project`."
  apiProjectRepoId:
    type: "object"
    properties:
      projectId:
        type: "string"
        description: "The ID of the project."
      repo_name:
        type: "string"
        description: "The name of the repo. Leave empty for the default repo."
    description: "Selects a repo using a Google Cloud Platform project ID (e.g.,\n\
      winged-cargo-31) and a repo name within that project."
  apiRepoId:
    type: "object"
    properties:
      project_repo_id:
        description: "A combination of a project ID and a repo name."
        $ref: "#/definitions/apiProjectRepoId"
      uid:
        type: "string"
        description: "A server-assigned, globally unique identifier."
    description: "A unique identifier for a Cloud Repo."
  apiRepoSource:
    type: "object"
    properties:
      projectId:
        type: "string"
        description: "ID of the project that owns the repo."
      repo_name:
        type: "string"
        description: "Name of the repo."
      branch_name:
        type: "string"
        description: "Name of the branch to build."
      tag_name:
        type: "string"
        description: "Name of the tag to build."
      commit_sha:
        type: "string"
        description: "Explicit commit SHA to build."
    description: "RepoSource describes the location of the source in a Google Cloud\
      \ Source\nRepository."
  apiSource:
    type: "object"
    properties:
      storage_source:
        description: "If provided, get the source from this location in in Google\
          \ Cloud\nStorage."
        $ref: "#/definitions/apiStorageSource"
      repo_source:
        description: "If provided, get source from this location in a Cloud Repo."
        $ref: "#/definitions/apiRepoSource"
      artifact_storage_source:
        description: "If provided, the input binary artifacts for the build came from\
          \ this\nlocation."
        $ref: "#/definitions/apiStorageSource"
      file_hashes:
        type: "object"
        description: "Hash(es) of the build source, which can be used to verify that\
          \ the original\nsource integrity was maintained in the build.\n\nThe keys\
          \ to this map are file paths used as build source and the values\ncontain\
          \ the hash values for those files.\n\nIf the build source came in a single\
          \ package such as a gzipped tarfile\n(.tar.gz), the FileHash will be for\
          \ the single path to that file."
        additionalProperties:
          $ref: "#/definitions/apiFileHashes"
      context:
        description: "If provided, the source code used for the build came from this\
          \ location."
        $ref: "#/definitions/apiSourceContext"
      additional_contexts:
        type: "array"
        description: "If provided, some of the source code used for the build may\
          \ be found in\nthese locations, in the case where the source repository\
          \ had multiple\nremotes or submodules. This list will not include the context\
          \ specified in\nthe context field."
        items:
          $ref: "#/definitions/apiSourceContext"
    description: "Source describes the location of the source used for the build."
  apiSourceContext:
    type: "object"
    properties:
      cloud_repo:
        description: "A SourceContext referring to a revision in a Google Cloud Source\
          \ Repo."
        $ref: "#/definitions/apiCloudRepoSourceContext"
      gerrit:
        description: "A SourceContext referring to a Gerrit project."
        $ref: "#/definitions/apiGerritSourceContext"
      git:
        description: "A SourceContext referring to any third party Git repo (e.g.,\
          \ GitHub)."
        $ref: "#/definitions/apiGitSourceContext"
      labels:
        type: "object"
        description: "Labels with user defined metadata."
        additionalProperties:
          type: "string"
    description: "A SourceContext is a reference to a tree of files. A SourceContext\
      \ together\nwith a path point to a unique revision of a single file or directory."
  apiStorageSource:
    type: "object"
    properties:
      bucket:
        type: "string"
        description: "Google Cloud Storage bucket containing source (see [Bucket Name\n\
          Requirements]\n(https://cloud.google.com/storage/docs/bucket-naming#requirements))."
      object:
        type: "string"
        description: "Google Cloud Storage object containing source."
      generation:
        type: "string"
        format: "int64"
        description: "Google Cloud Storage generation for the object."
    description: "StorageSource describes the location of the source in an archive\
      \ file in\nGoogle Cloud Storage."
  apiUpdateOperationRequest:
    type: "object"
    properties:
      name:
        type: "string"
        description: "The name of the Operation.\nShould be of the form \"projects/{projectId}/operations/{operationId}\"\
          ."
      operation:
        description: "The operation to create."
        $ref: "#/definitions/Operation"
    title: "Request for updating an existing operation"
  apiVulnerabilityType:
    type: "object"
    properties:
      cvss_score:
        type: "number"
        format: "float"
        description: "The CVSS score for this Vulnerability."
      severity:
        title: "Note provider assigned impact of the vulnerability"
        $ref: "#/definitions/VulnerabilityTypeSeverity"
      details:
        type: "array"
        description: "All information about the package to specifically identify this\n\
          vulnerability. One entry per (version range and cpe_uri) the\npackage vulnerability\
          \ has manifested in."
        items:
          $ref: "#/definitions/VulnerabilityTypeDetail"
    description: "VulnerabilityType provides metadata about a security vulnerability."
  Empty:
    type: "object"
    title: "A generic empty message that you can re-use to avoid defining duplicated\n\
      empty messages in your APIs. A typical example is to use it as the request\n\
      or the response type of an API method."
    description: "service Foo {\n      rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);\n\
      \    }\n\nThe JSON representation for `Empty` is empty JSON object `{}`."
  Operation:
    type: "object"
    properties:
      name:
        type: "string"
        description: "The server-assigned name, which is only unique within the same\
          \ service that\noriginally returns it. If you use the default HTTP mapping,\
          \ the\n`name` should have the format of `operations/some/unique/name`."
      metadata:
        type: "object"
        description: "Service-specific metadata associated with the operation.  It\
          \ typically\ncontains progress information and common metadata such as create\
          \ time.\nSome services might not provide such metadata.  Any method that\
          \ returns a\nlong-running operation should document the metadata type, if\
          \ any."
        additionalProperties:
          type: "string"
          description: "Properties of the object. Contains field @type with type URL."
      done:
        type: "boolean"
        description: "If the value is `false`, it means the operation is still in\
          \ progress.\nIf true, the operation is completed, and either `error` or\
          \ `response` is\navailable."
      error:
        description: "The error result of the operation in case of failure or cancellation."
        $ref: "#/definitions/Status"
      response:
        type: "object"
        description: "The normal response of the operation in case of success.  If\
          \ the original\nmethod returns no data on success, such as `Delete`, the\
          \ response is\n`google.protobuf.Empty`.  If the original method is standard\n\
          `Get`/`Create`/`Update`, the response should be the resource.  For other\n\
          methods, the response should have the type `XxxResponse`, where `Xxx`\n\
          is the original method name.  For example, if the original method name\n\
          is `TakeSnapshot()`, the inferred response type is\n`TakeSnapshotResponse`."
        additionalProperties:
          type: "string"
          description: "Properties of the object. Contains field @type with type URL."
    description: "This resource represents a long-running operation that is the result\
      \ of a\nnetwork API call."
  Status:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
        description: "The status code, which should be an enum value of google.rpc.Code."
      message:
        type: "string"
        description: "A developer-facing error message, which should be in English.\
          \ Any\nuser-facing error message should be localized and sent in the\ngoogle.rpc.Status.details\
          \ field, or localized by the client."
      details:
        type: "array"
        description: "A list of messages that carry the error details.  There is a\
          \ common set of\nmessage types for APIs to use."
        items:
          type: "object"
          additionalProperties:
            type: "string"
            description: "Properties of the object. Contains field @type with type\
              \ URL."
    description: "The `Status` type defines a logical error model that is suitable\
      \ for different\nprogramming environments, including REST APIs and RPC APIs.\
      \ It is used by\n[gRPC](https://github.com/grpc). The error model is designed\
      \ to be:\n\n- Simple to use and understand for most users\n- Flexible enough\
      \ to meet unexpected needs\n\n# Overview\n\nThe `Status` message contains three\
      \ pieces of data: error code, error message,\nand error details. The error code\
      \ should be an enum value of\ngoogle.rpc.Code, but it may accept additional\
      \ error codes if needed.  The\nerror message should be a developer-facing English\
      \ message that helps\ndevelopers *understand* and *resolve* the error. If a\
      \ localized user-facing\nerror message is needed, put the localized message\
      \ in the error details or\nlocalize it in the client. The optional error details\
      \ may contain arbitrary\ninformation about the error. There is a predefined\
      \ set of error detail types\nin the package `google.rpc` that can be used for\
      \ common error conditions.\n\n# Language mapping\n\nThe `Status` message is\
      \ the logical representation of the error model, but it\nis not necessarily\
      \ the actual wire format. When the `Status` message is\nexposed in different\
      \ client libraries and different wire protocols, it can be\nmapped differently.\
      \ For example, it will likely be mapped to some exceptions\nin Java, but more\
      \ likely mapped to some error codes in C.\n\n# Other uses\n\nThe error model\
      \ and the `Status` message can be used in a variety of\nenvironments, either\
      \ with or without APIs, to provide a\nconsistent developer experience across\
      \ different environments.\n\nExample uses of this error model include:\n\n-\
      \ Partial errors. If a service needs to return partial errors to the client,\n\
      \    it may embed the `Status` in the normal response to indicate the partial\n\
      \    errors.\n\n- Workflow errors. A typical workflow has multiple steps. Each\
      \ step may\n    have a `Status` message for error reporting.\n\n- Batch operations.\
      \ If a client uses batch request and batch response, the\n    `Status` message\
      \ should be used directly inside batch response, one for\n    each error sub-response.\n\
      \n- Asynchronous operations. If an API call embeds asynchronous operation\n\
      \    results in its response, the status of those operations should be\n   \
      \ represented directly using the `Status` message.\n\n- Logging. If some API\
      \ errors are stored in logs, the message `Status` could\n    be used directly\
      \ after any stripping needed for security/privacy reasons."
